#-------------------
# Getting started
#-------------------

install.packages("rio")
install.packages("Rtools")
install.packages("dplyr")
install.packages("raster")
install.packages("ggplot2")
install.packages("rgdal")
install.packages("ggpubr")
install.packages("rstatix")
install.packages("maps")
install.packages("viridis")
install.packages("sf")
install.packages("RColorBrewer")



### load libraries
require(rio)
require(dplyr)
library(raster)
library(ggplot2)
library(rgdal)
library(ggpubr)
library(rstatix) # allow integration of corrected p-values in ggplots (not used)
library(maps)
library(viridis)
library(sf) # raster to polygon
library(RColorBrewer) 


### Set workdir

PATH <- "C:/MyWorkDirectory" # set your own work directory
setwd(PATH)

#### Load data ####

## We do not share the data (as they are properties of several oragnisations), you will have to retrive them yourself, same for the raster data we used.

#---- GBIF (occurence data with location coordinates)


GBIF <- readRDS("Data/GBIF/GBIF_data_Globtherm.Rdata") # Takes a bit of time to be loaded


#---- IUCN (polygons -> needs to define a resolution to extract enviornmental information). Assumption: species present in all pixels falling within the polygon

IUCN <- readRDS("Data/IUCN/Range_map_all_species.Rdata")


#---- Load climatic data

clim <- getData("worldclim", var="bio", res=2.5) # 2.5' resolution


#---- Load experimentally-derived critical thermal limits -> limits of the physiological niche

Exp.dataGT <- import("Data/Data_GlobalTherm.xlsx"); Exp.dataGT$species <- paste(Exp.dataGT$Genus, Exp.dataGT$Species, sep=" ") 





#### Min and Max limits for All species at 2.5'/5' resolution (for GBIF data) ####

bio5 <- clim[[5]] / 10
bio6 <- clim[[6]] / 10

wat5 <- raster("Present.Surface.Temperature.Max.BOv2_1.asc/Present.Surface.Temperature.Max.asc") #marine data from Bio-ORACLE
wat6 <- raster("Present.Surface.Temperature.Min.BOv2_1.asc/Present.Surface.Temperature.Min.asc")
wat5 <- round(wat5, digits = 2)
wat6 <- round(wat6, digits = 2)


sp.names <- as.data.frame(NULL)

for (i in 1:length(IUCN$binomial)) {
  species <- c(paste0(IUCN$binomial[i]))
  if (length(which((sp.names$species == paste0(species))==T))>0) {
  } else { 
    marine <- IUCN$marine[i]
    terrestial <- IUCN$terrestial[i]
    freshwater <- IUCN$freshwater[i]
    kingdom <- IUCN$kingdom[i]
    phylum <- IUCN$phylum[i]
    class <- IUCN$class[i]
    order <- IUCN$order_[i]
    family <- IUCN$family[i]
    genus <- IUCN$genus[i]
    j <- which(Exp.dataGT$species == species)
    max.metrics <- Exp.dataGT$max_metric[j]
    min.metrics <- Exp.dataGT$min_metric[j]
    sp <- as.data.frame(cbind(species, kingdom, phylum, class, order, family, genus, marine, terrestial, freshwater, max.metrics, min.metrics))
    sp.names <- rbind(sp.names, sp)
  }
}


### determination of Min and Max limits

MinMax <- as.data.frame(NULL)
temp <- as.data.frame(NULL)

h0 <- Sys.time()
for (i in 1:length(sp.names$species)) {
  
  ### we determine if each species is "terrestial", "marine" or only "freshwater"
  if (sp.names$terrestial[i]=="true") {
    ras5 <- bio5
    ras6 <- bio6
  } else if (sp.names$marine[i]=="true") {
    ras5 <- wat5
    ras6 <- wat6
  } else {
    ras5 <- bio5
    ras6 <- bio6
  }
  
  ### IUCN
  sp.iucn <- IUCN[IUCN$binomial == sp.names$species[i],]
  
  crop <- crop(ras5, sp.iucn)
  grd <- rasterize(sp.iucn[,1], crop, 1, background=0, fun="last")
  Occ.iucn <- as.data.frame(grd, xy=T)
  Occ.iucn <- Occ.iucn[which(Occ.iucn[,3]!=0),]
  
  # max
  max.iucn <- extract(ras5, Occ.iucn[,1:2])
  max.iucn <- na.omit(max.iucn)
  if (length(max.iucn) > 0) {
    max_iucn <- as.numeric(max(max.iucn, na.rm=T))
    
    #min
    min.iucn <- extract(ras6, Occ.iucn[,1:2])
    min.iucn <- na.omit(min.iucn)
    min_iucn <- as.numeric(min(min.iucn, na.rm=T))
  
  } else {
    min_iucn <- as.numeric(NA)
    max_iucn <- as.numeric(NA)
  }
  
  ### GBIF 
  sp <- sp.names$species[i]
  if (length(which((GBIF$species == sp)==T))>0) {
    SpSub <- subset(GBIF, species == sp)
    x <- SpSub$decimallongitude
    y <- SpSub$decimallatitude
    Occ.gbif <- as.data.frame(cbind(x,y))
    
    #max
    max.gbif <- as.data.frame(extract(ras5, Occ.gbif[,1:2], cellnumbers=T))
    max.gbif <- dplyr::distinct(max.gbif) # to have only once each cell
    max.gbif <- na.omit(max.gbif)
    if (length(max.gbif[,2]) > 0) {
      max_gbif <- as.numeric(max(max.gbif[,2], na.rm=T))
      
      #min
      min.gbif <- as.data.frame(extract(ras6, Occ.gbif[,1:2], cellnumbers=T))
      min.gbif <- dplyr::distinct(min.gbif)
      min.gbif <- na.omit(min.gbif)
      min_gbif <- as.numeric(min(min.gbif[,2], na.rm=T))
    
    } else {
    min_gbif <- as.numeric(NA)
    max_gbif <- as.numeric(NA)
    }
  } else {
    min_gbif <- as.numeric(NA)
    max_gbif <- as.numeric(NA)
  }
  
  ### EXPERIMENTAL
  j <- which(Exp.dataGT$species== sp)
  max_exp <- as.numeric(Exp.dataGT$Tmax[j])
  min_exp <- as.numeric(Exp.dataGT$tmin[j])
  
  ### end of the loop
  temp <- as.data.frame(cbind(sp.names[i,], max_iucn, min_iucn, max_gbif, min_gbif, max_exp, min_exp))
  MinMax <- rbind(MinMax, temp)
  
  print(paste0("Process: ", i/length(sp.names$species)*100, "%"))
  
}; print(paste0("Start: ", h0)); print(paste0("Finish: ", Sys.time()))

write.csv(MinMax, "Data/MinMax.csv")


### remove lines with missing data

f <- which(is.na(MinMax$max_iucn))
f1 <- which(is.na(MinMax$max_gbif))
f2 <- which(MinMax$min.metrics == "NA")
f3 <- which(MinMax$min.metrics == "SCP")

MinMaxRed <- MinMax[-c(f,f1,f2,f3),]


### add distinction "freshwater only"

MinMaxRed$classBis <- NA
for (i in 1:length(MinMaxRed$species)) {
  if (MinMaxRed$terrestial[i] == "false") {
    if (MinMaxRed$marine[i] == "false") {
      MinMaxRed$classBis[i] <- paste0(MinMaxRed$class[i], " (fw)")
    } else {
      MinMaxRed$classBis[i] <- paste(MinMaxRed$class[i])
    }
  } else {
    MinMaxRed$classBis[i] <- paste(MinMaxRed$class[i])
  }
}

MinMaxRed %>% 
  rename(
    classBis = classBis
  )

write.csv(MinMaxRed, "Data/MinMaxRed.csv")


### add column "Endotherm/Ectotherm"

MinMaxRed$Therm <- NA
for (i in 1:length(MinMaxRed$species)) {
  if (MinMaxRed$class[i] == "MAMMALIA") {
    MinMaxRed$Therm[i] <- paste("Endotherm")
  } else {
    MinMaxRed$Therm[i] <- paste("Ectotherm")
  }
}

MinMaxRed %>% 
  rename(
    Therm = Therm
  )

write.csv(MinMaxRed, "Data/MinMax_All_HiRe.csv")





#### Min and Max limits for All species at 1° resolution (for IUCN data) ####

bio5 <- clim[[5]] / 10
bio6 <- clim[[6]] / 10
bio5 <- aggregate(bio5, fact=24)  # résolution 60'/1°
bio6 <- aggregate(bio6, fact=24)
bio5 <- round(bio5, digits = 2)
bio6 <- round(bio6, digits = 2)

wat5 <- raster("Present.Surface.Temperature.Max.BOv2_1.asc/Present.Surface.Temperature.Max.asc") #marine data from Bio-ORACLE
wat6 <- raster("Present.Surface.Temperature.Min.BOv2_1.asc/Present.Surface.Temperature.Min.asc")
wat5 <- aggregate(wat5, fact=12) # résolution 60'/1°
wat6 <- aggregate(wat6, fact=12)
wat5 <- round(wat5, digits = 2)
wat6 <- round(wat6, digits = 2)


sp.names <- as.data.frame(NULL)

for (i in 1:length(IUCN$binomial)) {
  species <- c(paste0(IUCN$binomial[i]))
  if (length(which((sp.names$species == paste0(species))==T))>0) {
  } else { 
    marine <- IUCN$marine[i]
    terrestial <- IUCN$terrestial[i]
    freshwater <- IUCN$freshwater[i]
    kingdom <- IUCN$kingdom[i]
    phylum <- IUCN$phylum[i]
    class <- IUCN$class[i]
    order <- IUCN$order_[i]
    family <- IUCN$family[i]
    genus <- IUCN$genus[i]
    j <- which(Exp.dataGT$species == species)
    max.metrics <- Exp.dataGT$max_metric[j]
    min.metrics <- Exp.dataGT$min_metric[j]
    sp <- as.data.frame(cbind(species, kingdom, phylum, class, order, family, genus, marine, terrestial, freshwater, max.metrics, min.metrics))
    sp.names <- rbind(sp.names, sp)
  }
}


### determination of Min and Max limits

MinMax <- as.data.frame(NULL)
temp <- as.data.frame(NULL)

h0 <- Sys.time()
for (i in 1:length(sp.names$species)) {
  
  ### we determine if each species is "terrestial", "marine" or only "freshwater"
  if (sp.names$terrestial[i]=="true") {
    ras5 <- bio5
    ras6 <- bio6
  } else if (sp.names$marine[i]=="true") {
    ras5 <- wat5
    ras6 <- wat6
  } else {
    ras5 <- bio5
    ras6 <- bio6
  }
  
  ### IUCN
  sp.iucn <- IUCN[IUCN$binomial == sp.names$species[i],]
  
  crop <- crop(ras5, sp.iucn)
  grd <- rasterize(sp.iucn[,1], crop, 1, background=0, fun="last")
  Occ.iucn <- as.data.frame(grd, xy=T)
  Occ.iucn <- Occ.iucn[which(Occ.iucn[,3]!=0),]
  
  # max
  max.iucn <- extract(ras5, Occ.iucn[,1:2])
  max.iucn <- na.omit(max.iucn)
  if (length(max.iucn) > 0) {
    max_iucn <- as.numeric(max(max.iucn, na.rm=T))
    
    #min
    min.iucn <- extract(ras6, Occ.iucn[,1:2])
    min.iucn <- na.omit(min.iucn)
    min_iucn <- as.numeric(min(min.iucn, na.rm=T))
    
  } else {
    min_iucn <- as.numeric(NA)
    max_iucn <- as.numeric(NA)
  }
  
  ### GBIF 
  sp <- sp.names$species[i]
  if (length(which((GBIF$species == sp)==T))>0) {
    SpSub <- subset(GBIF, species == sp)
    x <- SpSub$decimallongitude
    y <- SpSub$decimallatitude
    Occ.gbif <- as.data.frame(cbind(x,y))
    
    #max
    max.gbif <- as.data.frame(extract(ras5, Occ.gbif[,1:2], cellnumbers=T))
    max.gbif <- dplyr::distinct(max.gbif) # to have only once each cell
    max.gbif <- na.omit(max.gbif)
    if (length(max.gbif[,2]) > 0) {
      max_gbif <- as.numeric(max(max.gbif[,2], na.rm=T))
      
      #min
      min.gbif <- as.data.frame(extract(ras6, Occ.gbif[,1:2], cellnumbers=T))
      min.gbif <- dplyr::distinct(min.gbif)
      min.gbif <- na.omit(min.gbif)
      min_gbif <- as.numeric(min(min.gbif[,2], na.rm=T))
      
    } else {
      min_gbif <- as.numeric(NA)
      max_gbif <- as.numeric(NA)
    }
  } else {
    min_gbif <- as.numeric(NA)
    max_gbif <- as.numeric(NA)
  }
  
  ### EXPERIMENTAL
  j <- which(Exp.dataGT$species== sp)
  max_exp <- as.numeric(Exp.dataGT$Tmax[j])
  min_exp <- as.numeric(Exp.dataGT$tmin[j])
  
  ### end of the loop
  temp <- as.data.frame(cbind(sp.names[i,], max_iucn, min_iucn, max_gbif, min_gbif, max_exp, min_exp))
  MinMax <- rbind(MinMax, temp)
  
  print(paste0("Process: ", i/length(sp.names$species)*100, "%"))
  
}; print(paste0("Start: ", h0)); print(paste0("Finish: ", Sys.time()))

write.csv(MinMax, "Data/MinMax.csv")


### remove lines with missing data

f <- which(is.na(MinMax$max_iucn))
f1 <- which(is.na(MinMax$max_gbif))
f2 <- which(MinMax$min.metrics == "NA")
f3 <- which(MinMax$min.metrics == "SCP")

MinMaxRed <- MinMax[-c(f,f1,f2,f3),]


### add distinction "freshwater only"

MinMaxRed$classBis <- NA
for (i in 1:length(MinMaxRed$species)) {
  if (MinMaxRed$terrestial[i] == "false") {
    if (MinMaxRed$marine[i] == "false") {
      MinMaxRed$classBis[i] <- paste0(MinMaxRed$class[i], " (fw)")
    } else {
      MinMaxRed$classBis[i] <- paste(MinMaxRed$class[i])
    }
  } else {
    MinMaxRed$classBis[i] <- paste(MinMaxRed$class[i])
  }
}

MinMaxRed %>% 
  rename(
    classBis = classBis
  )

write.csv(MinMaxRed, "Data/MinMaxRed.csv")


### add column "Endotherm/Ectotherm"

MinMaxRed$Therm <- NA
for (i in 1:length(MinMaxRed$species)) {
  if (MinMaxRed$class[i] == "MAMMALIA") {
    MinMaxRed$Therm[i] <- paste("Endotherm")
  } else {
    MinMaxRed$Therm[i] <- paste("Ectotherm")
  }
}

MinMaxRed %>% 
  rename(
    Therm = Therm
  )

write.csv(MinMaxRed, "Data/MinMax_All_LoRe.csv")






#### Count + proportion of cells for All species at 2.5'/5' resolution with limits measured at 1° resolution ####

### Présent
bio5.0 <- clim[[5]] / 10
bio6.0 <- clim[[6]] / 10
wat5.0 <- raster("Present.Surface.Temperature.Max.BOv2_1.asc/Present.Surface.Temperature.Max.asc")
wat6.0 <- raster("Present.Surface.Temperature.Min.BOv2_1.asc/Present.Surface.Temperature.Min.asc")
wat5.0 <- round(wat5.0, digits = 2)
wat6.0 <- round(wat6.0, digits = 2)


### SSP. 1_2.6
bio5.2 <- raster("wc_126_2100/band5.tif")
bio6.2 <- raster("wc_126_2100/band6.tif")
wat5.2 <- raster("RCP26.2100.Surface.Temperature.Max.BOv2_1.asc/2100AOGCM.RCP26.Surface.Temperature.Max.asc.BOv2_1.asc") 
wat6.2 <- raster("RCP26.2100.Surface.Temperature.Min.BOv2_1.asc/2100AOGCM.RCP26.Surface.Temperature.Min.asc.BOv2_1.asc")
wat5.2 <- round(wat5.2, digits = 2)
wat6.2 <- round(wat6.2, digits = 2)


### SSP 5_8.5
bio5.8 <- raster("wc_585_2100/band5.tif")
bio6.8 <- raster("wc_585_2100/band6.tif")
wat5.8 <- raster("RCP85.2100.Surface.Temperature.Max.BOv2_1.asc/2100AOGCM.RCP85.Surface.Temperature.Max.asc.BOv2_1.asc")
wat6.8 <- raster("RCP85.2100.Surface.Temperature.Min.BOv2_1.asc/2100AOGCM.RCP85.Surface.Temperature.Min.asc.BOv2_1.asc")
wat5.8 <- round(wat5.8, digits = 2)
wat6.8 <- round(wat6.8, digits = 2)

MinMaxNewRed <- import("Data/MinMax_All_LoRe.csv")

CountNew <- as.data.frame(NULL)

h0 <- Sys.time()
for (i in 1:length(MinMaxNewRed$species)) {
  
  ### MAXs
  if (is.na(MinMaxNewRed$max_exp[i])) {
    max.i.t.0 <- NA; max.i.e.0 <- NA; max.i.o.0 <- NA; max.i.d.0 <- NA
    max.i.t.2 <- NA; max.i.e.2 <- NA; max.i.o.2 <- NA; max.i.d.2 <- NA
    max.i.t.8 <- NA; max.i.e.8 <- NA; max.i.o.8 <- NA; max.i.d.8 <- NA
    
    max.g.t.0 <- NA; max.g.e.0 <- NA; max.g.o.0 <- NA; max.g.d.0 <- NA
    max.g.t.2 <- NA; max.g.e.2 <- NA; max.g.o.2 <- NA; max.g.d.2 <- NA
    max.g.t.8 <- NA; max.g.e.8 <- NA; max.g.o.8 <- NA; max.g.d.8 <- NA
    
  } else {
    
    ### species is "terrestial", "marine" or other ("freshwater")
    if (MinMaxNewRed$terrestial[i]=="true") {
      act5 <- bio5.0
      f2.5 <- bio5.2
      f8.5 <- bio5.8
      
    } else if (MinMaxNewRed$marine[i]=="true") {
      act5 <- wat5.0
      f2.5 <- wat5.2
      f8.5 <- wat5.8
      
    } else {
      act5 <- bio5.0
      f2.5 <- bio5.2
      f8.5 <- bio5.8
    }
    
    ### IUCN
    sp.iucn <- IUCN[IUCN$binomial == MinMaxNewRed$species[i],]
    
    crop <- crop(act5, sp.iucn)
    grd <- rasterize(sp.iucn[,1], crop, 1, background=0, fun="last")
    Occ.iucn <- as.data.frame(grd, xy=T)
    Occ.iucn <- Occ.iucn[which(Occ.iucn[,3]!=0),]
    
    max.i.0 <- as.data.frame(extract(act5, Occ.iucn[,1:2])) ## All cells on current raster
    max.i.0 <- na.omit(max.i.0)
    max.i.2 <- as.data.frame(extract(f2.5, Occ.iucn[,1:2])) ## All cells for RCP 2.6
    max.i.2 <- na.omit(max.i.2)
    max.i.8 <- as.data.frame(extract(f8.5, Occ.iucn[,1:2])) ## All cells for RCP 8.5
    max.i.8 <- na.omit(max.i.8)
    
    ## Count
    #current
    max.i.t.0 <- count(max.i.0); max.i.t.0 <- max.i.t.0[1,1]
    sub <- as.data.frame(which(max.i.0[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.e.0 <- count(sub); max.i.e.0 <- max.i.e.0[1,1]
    submax.i.e.0 <- sub
    
    sub <- as.data.frame(which(max.i.0[,1] <= MinMaxNewRed$max_iucn[i]))
    max.i.o.0 <- count(sub); max.i.o.0 <- max.i.o.0[1,1]
    submax.i.o.0 <- sub
    
    sub <- as.data.frame(subset(max.i.0, max.i.0[,1] <= MinMaxNewRed$max_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.d.0 <- count(sub1);max.i.d.0 <- max.i.d.0[1,1]
    submax.i.d.0 <- sub1
    
    #RCP 2.6 (2100)
    max.i.t.2 <- count(max.i.2); max.i.t.2 <- max.i.t.2[1,1]
    sub <- as.data.frame(which(max.i.2[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.e.2 <- count(sub); max.i.e.2 <- max.i.e.2[1,1]
    submax.i.e.2 <- sub
    
    sub <- as.data.frame(which(max.i.2[,1] <= MinMaxNewRed$max_iucn[i]))
    max.i.o.2 <- count(sub); max.i.o.2 <- max.i.o.2[1,1]
    submax.i.o.2 <- sub
    
    sub <- as.data.frame(subset(max.i.2, max.i.2[,1] <= MinMaxNewRed$max_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.d.2 <- count(sub1);max.i.d.2 <- max.i.d.2[1,1]
    submax.i.d.2 <- sub1
    
    #RCP 8.5 (2100)
    max.i.t.8 <- count(max.i.8); max.i.t.8 <- max.i.t.8[1,1]
    sub <- as.data.frame(which(max.i.8[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.e.8 <- count(sub); max.i.e.8 <- max.i.e.8[1,1]
    submax.i.e.8 <- sub
    
    sub <- as.data.frame(which(max.i.8[,1] <= MinMaxNewRed$max_iucn[i]))
    max.i.o.8 <- count(sub); max.i.o.8 <- max.i.o.8[1,1]
    submax.i.o.8 <- sub
    
    sub <- as.data.frame(subset(max.i.8, max.i.8[,1] <= MinMaxNewRed$max_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.d.8 <- count(sub1);max.i.d.8 <- max.i.d.8[1,1]
    submax.i.d.8 <- sub1
    
    
    ### GBIF
    sp <- MinMaxNewRed$species[i]
    SpSub <- subset(GBIF, species == sp)
    x <- SpSub$decimallongitude
    y <- SpSub$decimallatitude
    Occ.gbif <- as.data.frame(cbind(x,y))
    
    max.g.0 <- as.data.frame(extract(act5, Occ.gbif[,1:2], cellnumbers=T))
    max.g.0 <- dplyr::distinct(max.g.0)
    max.g.0 <- na.omit(max.g.0)
    
    max.g.2 <- as.data.frame(extract(f2.5, Occ.gbif[,1:2], cellnumbers=T))
    max.g.2 <- dplyr::distinct(max.g.2)
    max.g.2 <- na.omit(max.g.2)
    
    max.g.8 <- as.data.frame(extract(f8.5, Occ.gbif[,1:2], cellnumbers=T))
    max.g.8 <- dplyr::distinct(max.g.8)
    max.g.8 <- na.omit(max.g.8)
    
    ## Count
    #current
    max.g.t.0 <- count(max.g.0); max.g.t.0 <- max.g.t.0[1,1]
    sub <- as.data.frame(which(max.g.0[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.e.0 <- count(sub); max.g.e.0 <- max.g.e.0[1,1]
    submax.g.e.0 <- sub
    
    sub <- as.data.frame(which(max.g.0[,2] <= MinMaxNewRed$max_gbif[i]))
    max.g.o.0 <- count(sub); max.g.o.0 <- max.g.o.0[1,1]
    submax.g.o.0 <- sub
    
    sub <- as.data.frame(subset(max.g.0, max.g.0[,2] <= MinMaxNewRed$max_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.d.0 <- count(sub1);max.g.d.0 <- max.g.d.0[1,1]
    submax.g.d.0 <- sub1
    
    #RCP2.6
    max.g.t.2 <- count(max.g.2); max.g.t.2 <- max.g.t.2[1,1]
    sub <- as.data.frame(which(max.g.2[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.e.2 <- count(sub); max.g.e.2 <- max.g.e.2[1,1]
    submax.g.e.2 <- sub
    
    sub <- as.data.frame(which(max.g.2[,2] <= MinMaxNewRed$max_gbif[i]))
    max.g.o.2 <- count(sub); max.g.o.2 <- max.g.o.2[1,1]
    submax.g.o.2 <- sub
    
    sub <- as.data.frame(subset(max.g.2, max.g.2[,2] <= MinMaxNewRed$max_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.d.2 <- count(sub1);max.g.d.2 <- max.g.d.2[1,1]
    submax.g.d.2 <- sub1
    
    #RCP8.5
    max.g.t.8 <- count(max.g.8); max.g.t.8 <- max.g.t.8[1,1]
    sub <- as.data.frame(which(max.g.8[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.e.8 <- count(sub); max.g.e.8 <- max.g.e.8[1,1]
    submax.g.e.8 <- sub
    
    sub <- as.data.frame(which(max.g.8[,2] <= MinMaxNewRed$max_gbif[i]))
    max.g.o.8 <- count(sub); max.g.o.8 <- max.g.o.8[1,1]
    submax.g.o.8 <- sub
    
    sub <- as.data.frame(subset(max.g.8, max.g.8[,2] <= MinMaxNewRed$max_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.d.8 <- count(sub1);max.g.d.8 <- max.g.d.8[1,1]
    submax.g.d.8 <- sub1
  }
  
  
  
  ### MINs
  if (is.na(MinMaxNewRed$min_exp[i])) {
    min.i.t.0 <- NA; min.i.e.0 <- NA; min.i.o.0 <- NA; min.i.d.0 <- NA
    min.i.t.2 <- NA; min.i.e.2 <- NA; min.i.o.2 <- NA; min.i.d.2 <- NA
    min.i.t.8 <- NA; min.i.e.8 <- NA; min.i.o.8 <- NA; min.i.d.8 <- NA
    
    min.g.t.0 <- NA; min.g.e.0 <- NA; min.g.o.0 <- NA; min.g.d.0 <- NA
    min.g.t.2 <- NA; min.g.e.2 <- NA; min.g.o.2 <- NA; min.g.d.2 <- NA
    min.g.t.8 <- NA; min.g.e.8 <- NA; min.g.o.8 <- NA; min.g.d.8 <- NA
    
  } else {
    
    ### species is "terrestial", "marine" or other ("freshwater")
    if (MinMaxNewRed$terrestial[i]=="true") {
      act6 <- bio6.0
      f2.6 <- bio6.2
      f8.6 <- bio6.8
      
    } else if (MinMaxNewRed$marine[i]=="true") {
      act6 <- wat6.0
      f2.6 <- wat6.2
      f8.6 <- wat6.8
      
    } else {
      act6 <- bio6.0
      f2.6 <- bio6.2
      f8.6 <- bio6.8
    }
    
    ### IUCN
    sp.iucn <- IUCN[IUCN$binomial == MinMaxNewRed$species[i],]
    
    crop <- crop(act6, sp.iucn)
    grd <- rasterize(sp.iucn[,1], crop, 1, background=0, fun="last")
    grdmin <- grd
    
    Occ.iucn <- as.data.frame(grd, xy=T)
    Occ.iucn <- Occ.iucn[which(Occ.iucn[,3]!=0),]
    
    min.i.0 <- as.data.frame(extract(act6, Occ.iucn[,1:2]))
    min.i.0 <- na.omit(min.i.0)
    min.i.2 <- as.data.frame(extract(f2.6, Occ.iucn[,1:2])) 
    min.i.2 <- na.omit(min.i.2)    
    min.i.8 <- as.data.frame(extract(f8.6, Occ.iucn[,1:2])) 
    min.i.8 <- na.omit(min.i.8)
    
    ## Count
    #current
    min.i.t.0 <- count(min.i.0); min.i.t.0 <- min.i.t.0[1,1]
    sub <- as.data.frame(which(min.i.0[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.e.0 <- count(sub); min.i.e.0 <- min.i.e.0[1,1]
    submin.i.e.0 <- sub
    
    sub <- as.data.frame(which(min.i.0[,1] >= MinMaxNewRed$min_iucn[i]))
    min.i.o.0 <- count(sub); min.i.o.0 <- min.i.o.0[1,1]
    submin.i.o.0 <- sub
    
    sub <- as.data.frame(subset(min.i.0, min.i.0[,1] >= MinMaxNewRed$min_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.d.0 <- count(sub1);min.i.d.0 <- min.i.d.0[1,1]
    submin.i.d.0 <- sub1
    
    #RCP2.6
    min.i.t.2 <- count(min.i.2); min.i.t.2 <- min.i.t.2[1,1]
    sub <- as.data.frame(which(min.i.2[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.e.2 <- count(sub); min.i.e.2 <- min.i.e.2[1,1]
    submin.i.e.2 <- sub
    
    sub <- as.data.frame(which(min.i.2[,1] >= MinMaxNewRed$min_iucn[i]))
    min.i.o.2 <- count(sub); min.i.o.2 <- min.i.o.2[1,1]
    submin.i.o.2 <- sub
    
    sub <- as.data.frame(subset(min.i.2, min.i.2[,1] >= MinMaxNewRed$min_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.d.2 <- count(sub1);min.i.d.2 <- min.i.d.2[1,1]
    submin.i.d.2 <- sub1
    
    #RCP8.5
    min.i.t.8 <- count(min.i.8); min.i.t.8 <- min.i.t.8[1,1]
    sub <- as.data.frame(which(min.i.8[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.e.8 <- count(sub); min.i.e.8 <- min.i.e.8[1,1]
    submin.i.e.8 <- sub
    
    sub <- as.data.frame(which(min.i.8[,1] >= MinMaxNewRed$min_iucn[i]))
    min.i.o.8 <- count(sub); min.i.o.8 <- min.i.o.8[1,1]
    submin.i.o.8 <- sub
    
    sub <- as.data.frame(subset(min.i.8, min.i.8[,1] >= MinMaxNewRed$min_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.d.8 <- count(sub1);min.i.d.8 <- min.i.d.8[1,1]
    submin.i.d.8 <- sub1
    
    ### GBIF
    sp <- MinMaxNewRed$species[i]
    SpSub <- subset(GBIF, species == sp)
    x <- SpSub$decimallongitude
    y <- SpSub$decimallatitude
    Occ.gbif <- as.data.frame(cbind(x,y))
    
    min.g.0 <- as.data.frame(extract(act6, Occ.gbif[,1:2], cellnumbers=T))
    min.g.0 <- dplyr::distinct(min.g.0)
    min.g.0 <- na.omit(min.g.0)
    
    min.g.2 <- as.data.frame(extract(f2.6, Occ.gbif[,1:2], cellnumbers=T))
    min.g.2 <- dplyr::distinct(min.g.2)
    min.g.2 <- na.omit(min.g.2)
    
    min.g.8 <- as.data.frame(extract(f8.6, Occ.gbif[,1:2], cellnumbers=T))
    min.g.8 <- dplyr::distinct(min.g.8)
    min.g.8 <- na.omit(min.g.8)
    
    ## Count
    #current
    min.g.t.0 <- count(min.g.0); min.g.t.0 <- min.g.t.0[1,1]
    sub <- as.data.frame(which(min.g.0[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.e.0 <- count(sub); min.g.e.0 <- min.g.e.0[1,1]
    submin.g.e.0 <- sub
    
    sub <- as.data.frame(which(min.g.0[,2] >= MinMaxNewRed$min_gbif[i]))
    min.g.o.0 <- count(sub); min.g.o.0 <- min.g.o.0[1,1]
    submin.g.o.0 <- sub
    
    sub <- as.data.frame(subset(min.g.0, min.g.0[,2] >= MinMaxNewRed$min_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.d.0 <- count(sub1);min.g.d.0 <- min.g.d.0[1,1]
    submin.g.d.0 <- sub1
    
    #RCP2.6
    min.g.t.2 <- count(min.g.2); min.g.t.2 <- min.g.t.2[1,1]
    sub <- as.data.frame(which(min.g.2[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.e.2 <- count(sub); min.g.e.2 <- min.g.e.2[1,1]
    submin.g.e.2 <- sub
    
    sub <- as.data.frame(which(min.g.2[,2] >= MinMaxNewRed$min_gbif[i]))
    min.g.o.2 <- count(sub); min.g.o.2 <- min.g.o.2[1,1]
    submin.g.o.2 <- sub
    
    sub <- as.data.frame(subset(min.g.2, min.g.2[,2] >= MinMaxNewRed$min_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.d.2 <- count(sub1);min.g.d.2 <- min.g.d.2[1,1]
    submin.g.d.2 <- sub1
    
    #RCP8.5
    min.g.t.8 <- count(min.g.8); min.g.t.8 <- min.g.t.8[1,1]
    sub <- as.data.frame(which(min.g.8[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.e.8 <- count(sub); min.g.e.8 <- min.g.e.8[1,1]
    submin.g.e.8 <- sub
    
    sub <- as.data.frame(which(min.g.8[,2] >= MinMaxNewRed$min_gbif[i]))
    min.g.o.8 <- count(sub); min.g.o.8 <- min.g.o.8[1,1]
    submin.g.o.8 <- sub
    
    sub <- as.data.frame(subset(min.g.8, min.g.8[,2] >= MinMaxNewRed$min_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.d.8 <- count(sub1);min.g.d.8 <- min.g.d.8[1,1]
    submin.g.d.8 <- sub1
  }   
  
  ### MINS and MAXS together
  if (is.na(MinMaxNewRed$max_exp[i])) {
    tog.i.e.0 <- NA; tog.i.o.0 <- NA; tog.i.d.0 <- NA
    tog.i.e.2 <- NA; tog.i.o.2 <- NA; tog.i.d.2 <- NA
    tog.i.e.8 <- NA; tog.i.o.8 <- NA; tog.i.d.8 <- NA
    
    tog.g.e.0 <- NA; tog.g.o.0 <- NA; tog.g.d.0 <- NA
    tog.g.e.2 <- NA; tog.g.o.2 <- NA; tog.g.d.2 <- NA
    tog.g.e.8 <- NA; tog.g.o.8 <- NA; tog.g.d.8 <- NA
    
  } else if (is.na(MinMaxNewRed$min_exp[i])) {
    tog.i.e.0 <- NA; tog.i.o.0 <- NA; tog.i.d.0 <- NA
    tog.i.e.2 <- NA; tog.i.o.2 <- NA; tog.i.d.2 <- NA
    tog.i.e.8 <- NA; tog.i.o.8 <- NA; tog.i.d.8 <- NA
    
    tog.g.e.0 <- NA; tog.g.o.0 <- NA; tog.g.d.0 <- NA
    tog.g.e.2 <- NA; tog.g.o.2 <- NA; tog.g.d.2 <- NA
    tog.g.e.8 <- NA; tog.g.o.8 <- NA; tog.g.d.8 <- NA
    
  } else {
    
    ##IUCN
    #current
    colnames(submin.i.e.0) <- c("x"); colnames(submax.i.e.0) <- c("x") 
    tog.i.e.0 <- as.data.frame(intersect(submin.i.e.0,submax.i.e.0))
    tog.i.e.0 <- count(tog.i.e.0);tog.i.e.0 <- tog.i.e.0[1,1]
    
    colnames(submin.i.o.0) <- c("x"); colnames(submax.i.o.0) <- c("x")
    tog.i.o.0 <- as.data.frame(intersect(submin.i.o.0,submax.i.o.0))
    tog.i.o.0 <- count(tog.i.o.0);tog.i.o.0 <- tog.i.o.0[1,1]
    
    colnames(submin.i.d.0) <- c("x"); colnames(submax.i.d.0) <- c("x")
    tog.i.d.0 <- as.data.frame(intersect(submin.i.d.0,submax.i.d.0))
    tog.i.d.0 <- count(tog.i.d.0);tog.i.d.0 <- tog.i.d.0[1,1]
    
    #RCP2.6
    colnames(submin.i.e.2) <- c("x"); colnames(submax.i.e.2) <- c("x") 
    tog.i.e.2 <- intersect(submin.i.e.2,submax.i.e.2)
    tog.i.e.2 <- count(tog.i.e.2);tog.i.e.2 <- tog.i.e.2[1,1]
    
    colnames(submin.i.o.2) <- c("x"); colnames(submax.i.o.2) <- c("x")
    tog.i.o.2 <- as.data.frame(intersect(submin.i.o.2,submax.i.o.2))
    tog.i.o.2 <- count(tog.i.o.2);tog.i.o.2 <- tog.i.o.2[1,1]
    
    colnames(submin.i.d.2) <- c("x"); colnames(submax.i.d.2) <- c("x")
    tog.i.d.2 <- as.data.frame(intersect(submin.i.d.2,submax.i.d.2))
    tog.i.d.2 <- count(tog.i.d.2);tog.i.d.2 <- tog.i.d.2[1,1]
    
    #RCP8.5
    colnames(submin.i.e.8) <- c("x"); colnames(submax.i.e.8) <- c("x") 
    tog.i.e.8 <- intersect(submin.i.e.8,submax.i.e.8)
    tog.i.e.8 <- count(tog.i.e.8);tog.i.e.8 <- tog.i.e.8[1,1]
    
    colnames(submin.i.o.8) <- c("x"); colnames(submax.i.o.8) <- c("x")
    tog.i.o.8 <- as.data.frame(intersect(submin.i.o.8,submax.i.o.8))
    tog.i.o.8 <- count(tog.i.o.8);tog.i.o.8 <- tog.i.o.8[1,1]
    
    colnames(submin.i.d.8) <- c("x"); colnames(submax.i.d.8) <- c("x")
    tog.i.d.8 <- as.data.frame(intersect(submin.i.d.8,submax.i.d.8))
    tog.i.d.8 <- count(tog.i.d.8);tog.i.d.8 <- tog.i.d.8[1,1]
    
    ##GBIF
    #current
    colnames(submin.g.e.0) <- c("x"); colnames(submax.g.e.0) <- c("x") 
    tog.g.e.0 <- as.data.frame(intersect(submin.g.e.0,submax.g.e.0))
    tog.g.e.0 <- count(tog.g.e.0);tog.g.e.0 <- tog.g.e.0[1,1]
    
    colnames(submin.g.o.0) <- c("x"); colnames(submax.g.o.0) <- c("x")
    tog.g.o.0 <- as.data.frame(intersect(submin.g.o.0,submax.g.o.0))
    tog.g.o.0 <- count(tog.g.o.0);tog.g.o.0 <- tog.g.o.0[1,1]
    
    colnames(submin.g.d.0) <- c("x"); colnames(submax.g.d.0) <- c("x")
    tog.g.d.0 <- as.data.frame(intersect(submin.g.d.0,submax.g.d.0))
    tog.g.d.0 <- count(tog.g.d.0);tog.g.d.0 <- tog.g.d.0[1,1]
    
    #RCP2.6
    colnames(submin.g.e.2) <- c("x"); colnames(submax.g.e.2) <- c("x") 
    tog.g.e.2 <- intersect(submin.g.e.2,submax.g.e.2)
    tog.g.e.2 <- count(tog.g.e.2);tog.g.e.2 <- tog.g.e.2[1,1]
    
    colnames(submin.g.o.2) <- c("x"); colnames(submax.g.o.2) <- c("x")
    tog.g.o.2 <- as.data.frame(intersect(submin.g.o.2,submax.g.o.2))
    tog.g.o.2 <- count(tog.g.o.2);tog.g.o.2 <- tog.g.o.2[1,1]
    
    colnames(submin.g.d.2) <- c("x"); colnames(submax.g.d.2) <- c("x")
    tog.g.d.2 <- as.data.frame(intersect(submin.g.d.2,submax.g.d.2))
    tog.g.d.2 <- count(tog.g.d.2);tog.g.d.2 <- tog.g.d.2[1,1]
    
    #RCP8.5
    colnames(submin.g.e.8) <- c("x"); colnames(submax.g.e.8) <- c("x") 
    tog.g.e.8 <- intersect(submin.g.e.8,submax.g.e.8)
    tog.g.e.8 <- count(tog.g.e.8);tog.g.e.8 <- tog.g.e.8[1,1]
    
    colnames(submin.g.o.8) <- c("x"); colnames(submax.g.o.8) <- c("x")
    tog.g.o.8 <- as.data.frame(intersect(submin.g.o.8,submax.g.o.8))
    tog.g.o.8 <- count(tog.g.o.8);tog.g.o.8 <- tog.g.o.8[1,1]
    
    colnames(submin.g.d.8) <- c("x"); colnames(submax.g.d.8) <- c("x")
    tog.g.d.8 <- as.data.frame(intersect(submin.g.d.8,submax.g.d.8))
    tog.g.d.8 <- count(tog.g.d.8);tog.g.d.8 <- tog.g.d.8[1,1]
  }
    
  ### End of the loop
  tmp <- as.data.frame(cbind(MinMaxNewRed[i,c(2:13,20:21)]))
  temp <- as.data.frame(cbind(tmp,
                              
                              max.i.t.0, max.i.e.0, max.i.o.0, max.i.d.0,
                              max.i.t.2, max.i.e.2, max.i.o.2, max.i.d.2,
                              max.i.t.8, max.i.e.8, max.i.o.8, max.i.d.8,
                              max.g.t.0, max.g.e.0, max.g.o.0, max.g.d.0,
                              max.g.t.2, max.g.e.2, max.g.o.2, max.g.d.2,
                              max.g.t.8, max.g.e.8, max.g.o.8, max.g.d.8,
                              
                              min.i.t.0, min.i.e.0, min.i.o.0, min.i.d.0,
                              min.i.t.2, min.i.e.2, min.i.o.2, min.i.d.2,
                              min.i.t.8, min.i.e.8, min.i.o.8, min.i.d.8,
                              min.g.t.0, min.g.e.0, min.g.o.0, min.g.d.0,
                              min.g.t.2, min.g.e.2, min.g.o.2, min.g.d.2,
                              min.g.t.8, min.g.e.8, min.g.o.8, min.g.d.8,
                              
                              tog.i.e.0, tog.i.o.0, tog.i.d.0,
                              tog.i.e.2, tog.i.o.2, tog.i.d.2,
                              tog.i.e.8, tog.i.o.8, tog.i.d.8,
                              tog.g.e.0, tog.g.o.0, tog.g.d.0,
                              tog.g.e.2, tog.g.o.2, tog.g.d.2,
                              tog.g.e.8, tog.g.o.8, tog.g.d.8))
  
  CountNew <- rbind(CountNew, temp)
  
  print(paste0("Process: ", i/length(MinMaxNewRed$species)*100, "%"))
  
}; print(paste0("Start: ", h0)); print(paste0("Finish: ", Sys.time()))


write.csv(CountNew, "Data/CountNew.csv")

##### Proportions' determination

CountNew <- import("Data/CountNew.csv")

prop0 <- data.frame(x1=1:length(CountNew$species)) # change according to the number of lines present in "CountNew" 
prop0$projection <- "Current"
prop0 <- cbind(prop0, CountNew[,2:15])

prop0$max.obs.iucn <- CountNew$max.i.o.0/CountNew$max.i.t.0*100
prop0$max.exp.iucn <- CountNew$max.i.e.0/CountNew$max.i.t.0*100
prop0$max.int.iucn <- CountNew$max.i.d.0/CountNew$max.i.t.0*100

prop0$max.obs.gbif <- CountNew$max.g.o.0/CountNew$max.g.t.0*100
prop0$max.exp.gbif <- CountNew$max.g.e.0/CountNew$max.g.t.0*100
prop0$max.int.gbif <- CountNew$max.g.d.0/CountNew$max.g.t.0*100

prop0$min.obs.iucn <- CountNew$min.i.o.0/CountNew$min.i.t.0*100
prop0$min.exp.iucn <- CountNew$min.i.e.0/CountNew$min.i.t.0*100
prop0$min.int.iucn <- CountNew$min.i.d.0/CountNew$min.i.t.0*100

prop0$min.obs.gbif <- CountNew$min.g.o.0/CountNew$min.g.t.0*100
prop0$min.exp.gbif <- CountNew$min.g.e.0/CountNew$min.g.t.0*100
prop0$min.int.gbif <- CountNew$min.g.d.0/CountNew$min.g.t.0*100

prop0$tog.obs.iucn <- CountNew$tog.i.o.0/CountNew$max.i.t.0*100
prop0$tog.exp.iucn <- CountNew$tog.i.e.0/CountNew$max.i.t.0*100
prop0$tog.int.iucn <- CountNew$tog.i.d.0/CountNew$max.i.t.0*100

prop0$tog.obs.gbif <- CountNew$tog.g.o.0/CountNew$max.g.t.0*100
prop0$tog.exp.gbif <- CountNew$tog.g.e.0/CountNew$max.g.t.0*100
prop0$tog.int.gbif <- CountNew$tog.g.d.0/CountNew$max.g.t.0*100

prop2 <- data.frame(x1=1:length(CountNew$species))
prop2$projection <- "RCP2.6"
prop2 <- cbind(prop2, CountNew[,2:15])

prop2$max.obs.iucn <- CountNew$max.i.o.2/CountNew$max.i.t.2*100
prop2$max.exp.iucn <- CountNew$max.i.e.2/CountNew$max.i.t.2*100
prop2$max.int.iucn <- CountNew$max.i.d.2/CountNew$max.i.t.2*100

prop2$max.obs.gbif <- CountNew$max.g.o.2/CountNew$max.g.t.2*100
prop2$max.exp.gbif <- CountNew$max.g.e.2/CountNew$max.g.t.2*100
prop2$max.int.gbif <- CountNew$max.g.d.2/CountNew$max.g.t.2*100

prop2$min.obs.iucn <- CountNew$min.i.o.2/CountNew$min.i.t.2*100
prop2$min.exp.iucn <- CountNew$min.i.e.2/CountNew$min.i.t.2*100
prop2$min.int.iucn <- CountNew$min.i.d.2/CountNew$min.i.t.2*100

prop2$min.obs.gbif <- CountNew$min.g.o.2/CountNew$min.g.t.2*100
prop2$min.exp.gbif <- CountNew$min.g.e.2/CountNew$min.g.t.2*100
prop2$min.int.gbif <- CountNew$min.g.d.2/CountNew$min.g.t.2*100

prop2$tog.obs.iucn <- CountNew$tog.i.o.2/CountNew$max.i.t.2*100
prop2$tog.exp.iucn <- CountNew$tog.i.e.2/CountNew$max.i.t.2*100
prop2$tog.int.iucn <- CountNew$tog.i.d.2/CountNew$max.i.t.2*100

prop2$tog.obs.gbif <- CountNew$tog.g.o.2/CountNew$max.g.t.2*100
prop2$tog.exp.gbif <- CountNew$tog.g.e.2/CountNew$max.g.t.2*100
prop2$tog.int.gbif <- CountNew$tog.g.d.2/CountNew$max.g.t.2*100


prop8 <- data.frame(x1=1:length(CountNew$species))
prop8$projection <- "RCP8.5"
prop8 <- cbind(prop8, CountNew[,2:15])

prop8$max.obs.iucn <- CountNew$max.i.o.8/CountNew$max.i.t.8*100
prop8$max.exp.iucn <- CountNew$max.i.e.8/CountNew$max.i.t.8*100
prop8$max.int.iucn <- CountNew$max.i.d.8/CountNew$max.i.t.8*100

prop8$max.obs.gbif <- CountNew$max.g.o.8/CountNew$max.g.t.8*100
prop8$max.exp.gbif <- CountNew$max.g.e.8/CountNew$max.g.t.8*100
prop8$max.int.gbif <- CountNew$max.g.d.8/CountNew$max.g.t.8*100

prop8$min.obs.iucn <- CountNew$min.i.o.8/CountNew$min.i.t.8*100
prop8$min.exp.iucn <- CountNew$min.i.e.8/CountNew$min.i.t.8*100
prop8$min.int.iucn <- CountNew$min.i.d.8/CountNew$min.i.t.8*100

prop8$min.obs.gbif <- CountNew$min.g.o.8/CountNew$min.g.t.8*100
prop8$min.exp.gbif <- CountNew$min.g.e.8/CountNew$min.g.t.8*100
prop8$min.int.gbif <- CountNew$min.g.d.8/CountNew$min.g.t.8*100

prop8$tog.obs.iucn <- CountNew$tog.i.o.8/CountNew$max.i.t.8*100
prop8$tog.exp.iucn <- CountNew$tog.i.e.8/CountNew$max.i.t.8*100
prop8$tog.int.iucn <- CountNew$tog.i.d.8/CountNew$max.i.t.8*100

prop8$tog.obs.gbif <- CountNew$tog.g.o.8/CountNew$max.g.t.8*100
prop8$tog.exp.gbif <- CountNew$tog.g.e.8/CountNew$max.g.t.8*100
prop8$tog.int.gbif <- CountNew$tog.g.d.8/CountNew$max.g.t.8*100


PropNew <- dplyr::bind_rows(prop0, prop2, prop8)

PropNew[,17:34] <- round(PropNew[,17:34], digits = 2)

write.csv(PropNew, "Data/Prop_All_Hi_LoRe.csv")






#### Count + proportion of cells for All species at 2.5'/5' resolution with limits measured at 2.5'/5' resolution ####

### Présent
bio5.0 <- clim[[5]] / 10
bio6.0 <- clim[[6]] / 10
wat5.0 <- raster("Present.Surface.Temperature.Max.BOv2_1.asc/Present.Surface.Temperature.Max.asc")
wat6.0 <- raster("Present.Surface.Temperature.Min.BOv2_1.asc/Present.Surface.Temperature.Min.asc")
wat5.0 <- round(wat5.0, digits = 2)
wat6.0 <- round(wat6.0, digits = 2)


### SSP. 1_2.6
bio5.2 <- raster("wc_126_2100/band5.tif")
bio6.2 <- raster("wc_126_2100/band6.tif")
wat5.2 <- raster("RCP26.2100.Surface.Temperature.Max.BOv2_1.asc/2100AOGCM.RCP26.Surface.Temperature.Max.asc.BOv2_1.asc") 
wat6.2 <- raster("RCP26.2100.Surface.Temperature.Min.BOv2_1.asc/2100AOGCM.RCP26.Surface.Temperature.Min.asc.BOv2_1.asc")
wat5.2 <- round(wat5.2, digits = 2)
wat6.2 <- round(wat6.2, digits = 2)


### SSP 5_8.5
bio5.8 <- raster("wc_585_2100/band5.tif")
bio6.8 <- raster("wc_585_2100/band6.tif")
wat5.8 <- raster("RCP85.2100.Surface.Temperature.Max.BOv2_1.asc/2100AOGCM.RCP85.Surface.Temperature.Max.asc.BOv2_1.asc")
wat6.8 <- raster("RCP85.2100.Surface.Temperature.Min.BOv2_1.asc/2100AOGCM.RCP85.Surface.Temperature.Min.asc.BOv2_1.asc")
wat5.8 <- round(wat5.8, digits = 2)
wat6.8 <- round(wat6.8, digits = 2)

MinMaxNewRed <- import("Data/MinMax_All_HiRe.csv")

CountNew <- as.data.frame(NULL)

h0 <- Sys.time()
for (i in 1:length(MinMaxNewRed$species)) {
  
  ### MAXs
  if (is.na(MinMaxNewRed$max_exp[i])) {
    max.i.t.0 <- NA; max.i.e.0 <- NA; max.i.o.0 <- NA; max.i.d.0 <- NA
    max.i.t.2 <- NA; max.i.e.2 <- NA; max.i.o.2 <- NA; max.i.d.2 <- NA
    max.i.t.8 <- NA; max.i.e.8 <- NA; max.i.o.8 <- NA; max.i.d.8 <- NA
    
    max.g.t.0 <- NA; max.g.e.0 <- NA; max.g.o.0 <- NA; max.g.d.0 <- NA
    max.g.t.2 <- NA; max.g.e.2 <- NA; max.g.o.2 <- NA; max.g.d.2 <- NA
    max.g.t.8 <- NA; max.g.e.8 <- NA; max.g.o.8 <- NA; max.g.d.8 <- NA
    
  } else {
    
    ### species is "terrestial", "marine" or other ("freshwater")
    if (MinMaxNewRed$terrestial[i]=="true") {
      act5 <- bio5.0
      f2.5 <- bio5.2
      f8.5 <- bio5.8
      
    } else if (MinMaxNewRed$marine[i]=="true") {
      act5 <- wat5.0
      f2.5 <- wat5.2
      f8.5 <- wat5.8
      
    } else {
      act5 <- bio5.0
      f2.5 <- bio5.2
      f8.5 <- bio5.8
    }
    
    ### IUCN
    sp.iucn <- IUCN[IUCN$binomial == MinMaxNewRed$species[i],]
    
    crop <- crop(act5, sp.iucn)
    grd <- rasterize(sp.iucn[,1], crop, 1, background=0, fun="last")
    Occ.iucn <- as.data.frame(grd, xy=T)
    Occ.iucn <- Occ.iucn[which(Occ.iucn[,3]!=0),]
    
    max.i.0 <- as.data.frame(extract(act5, Occ.iucn[,1:2])) ## All cells on current raster
    max.i.0 <- na.omit(max.i.0)
    max.i.2 <- as.data.frame(extract(f2.5, Occ.iucn[,1:2])) ## All cells for RCP 2.6
    max.i.2 <- na.omit(max.i.2)
    max.i.8 <- as.data.frame(extract(f8.5, Occ.iucn[,1:2])) ## All cells for RCP 8.5
    max.i.8 <- na.omit(max.i.8)
    
    ## Count
    #current
    max.i.t.0 <- count(max.i.0); max.i.t.0 <- max.i.t.0[1,1]
    sub <- as.data.frame(which(max.i.0[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.e.0 <- count(sub); max.i.e.0 <- max.i.e.0[1,1]
    submax.i.e.0 <- sub
    
    sub <- as.data.frame(which(max.i.0[,1] <= MinMaxNewRed$max_iucn[i]))
    max.i.o.0 <- count(sub); max.i.o.0 <- max.i.o.0[1,1]
    submax.i.o.0 <- sub
    
    sub <- as.data.frame(subset(max.i.0, max.i.0[,1] <= MinMaxNewRed$max_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.d.0 <- count(sub1);max.i.d.0 <- max.i.d.0[1,1]
    submax.i.d.0 <- sub1
    
    #RCP 2.6 (2100)
    max.i.t.2 <- count(max.i.2); max.i.t.2 <- max.i.t.2[1,1]
    sub <- as.data.frame(which(max.i.2[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.e.2 <- count(sub); max.i.e.2 <- max.i.e.2[1,1]
    submax.i.e.2 <- sub
    
    sub <- as.data.frame(which(max.i.2[,1] <= MinMaxNewRed$max_iucn[i]))
    max.i.o.2 <- count(sub); max.i.o.2 <- max.i.o.2[1,1]
    submax.i.o.2 <- sub
    
    sub <- as.data.frame(subset(max.i.2, max.i.2[,1] <= MinMaxNewRed$max_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.d.2 <- count(sub1);max.i.d.2 <- max.i.d.2[1,1]
    submax.i.d.2 <- sub1
    
    #RCP 8.5 (2100)
    max.i.t.8 <- count(max.i.8); max.i.t.8 <- max.i.t.8[1,1]
    sub <- as.data.frame(which(max.i.8[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.e.8 <- count(sub); max.i.e.8 <- max.i.e.8[1,1]
    submax.i.e.8 <- sub
    
    sub <- as.data.frame(which(max.i.8[,1] <= MinMaxNewRed$max_iucn[i]))
    max.i.o.8 <- count(sub); max.i.o.8 <- max.i.o.8[1,1]
    submax.i.o.8 <- sub
    
    sub <- as.data.frame(subset(max.i.8, max.i.8[,1] <= MinMaxNewRed$max_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] <= MinMaxNewRed$max_exp[i]))
    max.i.d.8 <- count(sub1);max.i.d.8 <- max.i.d.8[1,1]
    submax.i.d.8 <- sub1
    
    
    ### GBIF
    sp <- MinMaxNewRed$species[i]
    SpSub <- subset(GBIF, species == sp)
    x <- SpSub$decimallongitude
    y <- SpSub$decimallatitude
    Occ.gbif <- as.data.frame(cbind(x,y))
    
    max.g.0 <- as.data.frame(extract(act5, Occ.gbif[,1:2], cellnumbers=T))
    max.g.0 <- dplyr::distinct(max.g.0)
    max.g.0 <- na.omit(max.g.0)
    
    max.g.2 <- as.data.frame(extract(f2.5, Occ.gbif[,1:2], cellnumbers=T))
    max.g.2 <- dplyr::distinct(max.g.2)
    max.g.2 <- na.omit(max.g.2)
    
    max.g.8 <- as.data.frame(extract(f8.5, Occ.gbif[,1:2], cellnumbers=T))
    max.g.8 <- dplyr::distinct(max.g.8)
    max.g.8 <- na.omit(max.g.8)
    
    ## Count
    #current
    max.g.t.0 <- count(max.g.0); max.g.t.0 <- max.g.t.0[1,1]
    sub <- as.data.frame(which(max.g.0[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.e.0 <- count(sub); max.g.e.0 <- max.g.e.0[1,1]
    submax.g.e.0 <- sub
    
    sub <- as.data.frame(which(max.g.0[,2] <= MinMaxNewRed$max_gbif[i]))
    max.g.o.0 <- count(sub); max.g.o.0 <- max.g.o.0[1,1]
    submax.g.o.0 <- sub
    
    sub <- as.data.frame(subset(max.g.0, max.g.0[,2] <= MinMaxNewRed$max_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.d.0 <- count(sub1);max.g.d.0 <- max.g.d.0[1,1]
    submax.g.d.0 <- sub1
    
    #RCP2.6
    max.g.t.2 <- count(max.g.2); max.g.t.2 <- max.g.t.2[1,1]
    sub <- as.data.frame(which(max.g.2[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.e.2 <- count(sub); max.g.e.2 <- max.g.e.2[1,1]
    submax.g.e.2 <- sub
    
    sub <- as.data.frame(which(max.g.2[,2] <= MinMaxNewRed$max_gbif[i]))
    max.g.o.2 <- count(sub); max.g.o.2 <- max.g.o.2[1,1]
    submax.g.o.2 <- sub
    
    sub <- as.data.frame(subset(max.g.2, max.g.2[,2] <= MinMaxNewRed$max_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.d.2 <- count(sub1);max.g.d.2 <- max.g.d.2[1,1]
    submax.g.d.2 <- sub1
    
    #RCP8.5
    max.g.t.8 <- count(max.g.8); max.g.t.8 <- max.g.t.8[1,1]
    sub <- as.data.frame(which(max.g.8[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.e.8 <- count(sub); max.g.e.8 <- max.g.e.8[1,1]
    submax.g.e.8 <- sub
    
    sub <- as.data.frame(which(max.g.8[,2] <= MinMaxNewRed$max_gbif[i]))
    max.g.o.8 <- count(sub); max.g.o.8 <- max.g.o.8[1,1]
    submax.g.o.8 <- sub
    
    sub <- as.data.frame(subset(max.g.8, max.g.8[,2] <= MinMaxNewRed$max_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] <= MinMaxNewRed$max_exp[i]))
    max.g.d.8 <- count(sub1);max.g.d.8 <- max.g.d.8[1,1]
    submax.g.d.8 <- sub1
  }
  
  
  
  ### MINs
  if (is.na(MinMaxNewRed$min_exp[i])) {
    min.i.t.0 <- NA; min.i.e.0 <- NA; min.i.o.0 <- NA; min.i.d.0 <- NA
    min.i.t.2 <- NA; min.i.e.2 <- NA; min.i.o.2 <- NA; min.i.d.2 <- NA
    min.i.t.8 <- NA; min.i.e.8 <- NA; min.i.o.8 <- NA; min.i.d.8 <- NA
    
    min.g.t.0 <- NA; min.g.e.0 <- NA; min.g.o.0 <- NA; min.g.d.0 <- NA
    min.g.t.2 <- NA; min.g.e.2 <- NA; min.g.o.2 <- NA; min.g.d.2 <- NA
    min.g.t.8 <- NA; min.g.e.8 <- NA; min.g.o.8 <- NA; min.g.d.8 <- NA
    
  } else {
    
    ### species is "terrestial", "marine" or other ("freshwater")
    if (MinMaxNewRed$terrestial[i]=="true") {
      act6 <- bio6.0
      f2.6 <- bio6.2
      f8.6 <- bio6.8
      
    } else if (MinMaxNewRed$marine[i]=="true") {
      act6 <- wat6.0
      f2.6 <- wat6.2
      f8.6 <- wat6.8
      
    } else {
      act6 <- bio6.0
      f2.6 <- bio6.2
      f8.6 <- bio6.8
    }
    
    ### IUCN
    sp.iucn <- IUCN[IUCN$binomial == MinMaxNewRed$species[i],]
    
    crop <- crop(act6, sp.iucn)
    grd <- rasterize(sp.iucn[,1], crop, 1, background=0, fun="last")
    grdmin <- grd
    
    Occ.iucn <- as.data.frame(grd, xy=T)
    Occ.iucn <- Occ.iucn[which(Occ.iucn[,3]!=0),]
    
    min.i.0 <- as.data.frame(extract(act6, Occ.iucn[,1:2]))
    min.i.0 <- na.omit(min.i.0)
    min.i.2 <- as.data.frame(extract(f2.6, Occ.iucn[,1:2])) 
    min.i.2 <- na.omit(min.i.2)    
    min.i.8 <- as.data.frame(extract(f8.6, Occ.iucn[,1:2])) 
    min.i.8 <- na.omit(min.i.8)
    
    ## Count
    #current
    min.i.t.0 <- count(min.i.0); min.i.t.0 <- min.i.t.0[1,1]
    sub <- as.data.frame(which(min.i.0[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.e.0 <- count(sub); min.i.e.0 <- min.i.e.0[1,1]
    submin.i.e.0 <- sub
    
    sub <- as.data.frame(which(min.i.0[,1] >= MinMaxNewRed$min_iucn[i]))
    min.i.o.0 <- count(sub); min.i.o.0 <- min.i.o.0[1,1]
    submin.i.o.0 <- sub
    
    sub <- as.data.frame(subset(min.i.0, min.i.0[,1] >= MinMaxNewRed$min_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.d.0 <- count(sub1);min.i.d.0 <- min.i.d.0[1,1]
    submin.i.d.0 <- sub1
    
    #RCP2.6
    min.i.t.2 <- count(min.i.2); min.i.t.2 <- min.i.t.2[1,1]
    sub <- as.data.frame(which(min.i.2[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.e.2 <- count(sub); min.i.e.2 <- min.i.e.2[1,1]
    submin.i.e.2 <- sub
    
    sub <- as.data.frame(which(min.i.2[,1] >= MinMaxNewRed$min_iucn[i]))
    min.i.o.2 <- count(sub); min.i.o.2 <- min.i.o.2[1,1]
    submin.i.o.2 <- sub
    
    sub <- as.data.frame(subset(min.i.2, min.i.2[,1] >= MinMaxNewRed$min_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.d.2 <- count(sub1);min.i.d.2 <- min.i.d.2[1,1]
    submin.i.d.2 <- sub1
    
    #RCP8.5
    min.i.t.8 <- count(min.i.8); min.i.t.8 <- min.i.t.8[1,1]
    sub <- as.data.frame(which(min.i.8[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.e.8 <- count(sub); min.i.e.8 <- min.i.e.8[1,1]
    submin.i.e.8 <- sub
    
    sub <- as.data.frame(which(min.i.8[,1] >= MinMaxNewRed$min_iucn[i]))
    min.i.o.8 <- count(sub); min.i.o.8 <- min.i.o.8[1,1]
    submin.i.o.8 <- sub
    
    sub <- as.data.frame(subset(min.i.8, min.i.8[,1] >= MinMaxNewRed$min_iucn[i]))
    sub1 <- as.data.frame(which(sub[,1] >= MinMaxNewRed$min_exp[i]))
    min.i.d.8 <- count(sub1);min.i.d.8 <- min.i.d.8[1,1]
    submin.i.d.8 <- sub1
    
    ### GBIF
    sp <- MinMaxNewRed$species[i]
    SpSub <- subset(GBIF, species == sp)
    x <- SpSub$decimallongitude
    y <- SpSub$decimallatitude
    Occ.gbif <- as.data.frame(cbind(x,y))
    
    min.g.0 <- as.data.frame(extract(act6, Occ.gbif[,1:2], cellnumbers=T))
    min.g.0 <- dplyr::distinct(min.g.0)
    min.g.0 <- na.omit(min.g.0)
    
    min.g.2 <- as.data.frame(extract(f2.6, Occ.gbif[,1:2], cellnumbers=T))
    min.g.2 <- dplyr::distinct(min.g.2)
    min.g.2 <- na.omit(min.g.2)
    
    min.g.8 <- as.data.frame(extract(f8.6, Occ.gbif[,1:2], cellnumbers=T))
    min.g.8 <- dplyr::distinct(min.g.8)
    min.g.8 <- na.omit(min.g.8)
    
    ## Count
    #current
    min.g.t.0 <- count(min.g.0); min.g.t.0 <- min.g.t.0[1,1]
    sub <- as.data.frame(which(min.g.0[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.e.0 <- count(sub); min.g.e.0 <- min.g.e.0[1,1]
    submin.g.e.0 <- sub
    
    sub <- as.data.frame(which(min.g.0[,2] >= MinMaxNewRed$min_gbif[i]))
    min.g.o.0 <- count(sub); min.g.o.0 <- min.g.o.0[1,1]
    submin.g.o.0 <- sub
    
    sub <- as.data.frame(subset(min.g.0, min.g.0[,2] >= MinMaxNewRed$min_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.d.0 <- count(sub1);min.g.d.0 <- min.g.d.0[1,1]
    submin.g.d.0 <- sub1
    
    #RCP2.6
    min.g.t.2 <- count(min.g.2); min.g.t.2 <- min.g.t.2[1,1]
    sub <- as.data.frame(which(min.g.2[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.e.2 <- count(sub); min.g.e.2 <- min.g.e.2[1,1]
    submin.g.e.2 <- sub
    
    sub <- as.data.frame(which(min.g.2[,2] >= MinMaxNewRed$min_gbif[i]))
    min.g.o.2 <- count(sub); min.g.o.2 <- min.g.o.2[1,1]
    submin.g.o.2 <- sub
    
    sub <- as.data.frame(subset(min.g.2, min.g.2[,2] >= MinMaxNewRed$min_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.d.2 <- count(sub1);min.g.d.2 <- min.g.d.2[1,1]
    submin.g.d.2 <- sub1
    
    #RCP8.5
    min.g.t.8 <- count(min.g.8); min.g.t.8 <- min.g.t.8[1,1]
    sub <- as.data.frame(which(min.g.8[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.e.8 <- count(sub); min.g.e.8 <- min.g.e.8[1,1]
    submin.g.e.8 <- sub
    
    sub <- as.data.frame(which(min.g.8[,2] >= MinMaxNewRed$min_gbif[i]))
    min.g.o.8 <- count(sub); min.g.o.8 <- min.g.o.8[1,1]
    submin.g.o.8 <- sub
    
    sub <- as.data.frame(subset(min.g.8, min.g.8[,2] >= MinMaxNewRed$min_gbif[i]))
    sub1 <- as.data.frame(which(sub[,2] >= MinMaxNewRed$min_exp[i]))
    min.g.d.8 <- count(sub1);min.g.d.8 <- min.g.d.8[1,1]
    submin.g.d.8 <- sub1
  }   
  
  ### MINS and MAXS together
  if (is.na(MinMaxNewRed$max_exp[i])) {
    tog.i.e.0 <- NA; tog.i.o.0 <- NA; tog.i.d.0 <- NA
    tog.i.e.2 <- NA; tog.i.o.2 <- NA; tog.i.d.2 <- NA
    tog.i.e.8 <- NA; tog.i.o.8 <- NA; tog.i.d.8 <- NA
    
    tog.g.e.0 <- NA; tog.g.o.0 <- NA; tog.g.d.0 <- NA
    tog.g.e.2 <- NA; tog.g.o.2 <- NA; tog.g.d.2 <- NA
    tog.g.e.8 <- NA; tog.g.o.8 <- NA; tog.g.d.8 <- NA
    
  } else if (is.na(MinMaxNewRed$min_exp[i])) {
    tog.i.e.0 <- NA; tog.i.o.0 <- NA; tog.i.d.0 <- NA
    tog.i.e.2 <- NA; tog.i.o.2 <- NA; tog.i.d.2 <- NA
    tog.i.e.8 <- NA; tog.i.o.8 <- NA; tog.i.d.8 <- NA
    
    tog.g.e.0 <- NA; tog.g.o.0 <- NA; tog.g.d.0 <- NA
    tog.g.e.2 <- NA; tog.g.o.2 <- NA; tog.g.d.2 <- NA
    tog.g.e.8 <- NA; tog.g.o.8 <- NA; tog.g.d.8 <- NA
    
  } else {
    
    ##IUCN
    #current
    colnames(submin.i.e.0) <- c("x"); colnames(submax.i.e.0) <- c("x") 
    tog.i.e.0 <- as.data.frame(intersect(submin.i.e.0,submax.i.e.0))
    tog.i.e.0 <- count(tog.i.e.0);tog.i.e.0 <- tog.i.e.0[1,1]
    
    colnames(submin.i.o.0) <- c("x"); colnames(submax.i.o.0) <- c("x")
    tog.i.o.0 <- as.data.frame(intersect(submin.i.o.0,submax.i.o.0))
    tog.i.o.0 <- count(tog.i.o.0);tog.i.o.0 <- tog.i.o.0[1,1]
    
    colnames(submin.i.d.0) <- c("x"); colnames(submax.i.d.0) <- c("x")
    tog.i.d.0 <- as.data.frame(intersect(submin.i.d.0,submax.i.d.0))
    tog.i.d.0 <- count(tog.i.d.0);tog.i.d.0 <- tog.i.d.0[1,1]
    
    #RCP2.6
    colnames(submin.i.e.2) <- c("x"); colnames(submax.i.e.2) <- c("x") 
    tog.i.e.2 <- intersect(submin.i.e.2,submax.i.e.2)
    tog.i.e.2 <- count(tog.i.e.2);tog.i.e.2 <- tog.i.e.2[1,1]
    
    colnames(submin.i.o.2) <- c("x"); colnames(submax.i.o.2) <- c("x")
    tog.i.o.2 <- as.data.frame(intersect(submin.i.o.2,submax.i.o.2))
    tog.i.o.2 <- count(tog.i.o.2);tog.i.o.2 <- tog.i.o.2[1,1]
    
    colnames(submin.i.d.2) <- c("x"); colnames(submax.i.d.2) <- c("x")
    tog.i.d.2 <- as.data.frame(intersect(submin.i.d.2,submax.i.d.2))
    tog.i.d.2 <- count(tog.i.d.2);tog.i.d.2 <- tog.i.d.2[1,1]
    
    #RCP8.5
    colnames(submin.i.e.8) <- c("x"); colnames(submax.i.e.8) <- c("x") 
    tog.i.e.8 <- intersect(submin.i.e.8,submax.i.e.8)
    tog.i.e.8 <- count(tog.i.e.8);tog.i.e.8 <- tog.i.e.8[1,1]
    
    colnames(submin.i.o.8) <- c("x"); colnames(submax.i.o.8) <- c("x")
    tog.i.o.8 <- as.data.frame(intersect(submin.i.o.8,submax.i.o.8))
    tog.i.o.8 <- count(tog.i.o.8);tog.i.o.8 <- tog.i.o.8[1,1]
    
    colnames(submin.i.d.8) <- c("x"); colnames(submax.i.d.8) <- c("x")
    tog.i.d.8 <- as.data.frame(intersect(submin.i.d.8,submax.i.d.8))
    tog.i.d.8 <- count(tog.i.d.8);tog.i.d.8 <- tog.i.d.8[1,1]
    
    ##GBIF
    #current
    colnames(submin.g.e.0) <- c("x"); colnames(submax.g.e.0) <- c("x") 
    tog.g.e.0 <- as.data.frame(intersect(submin.g.e.0,submax.g.e.0))
    tog.g.e.0 <- count(tog.g.e.0);tog.g.e.0 <- tog.g.e.0[1,1]
    
    colnames(submin.g.o.0) <- c("x"); colnames(submax.g.o.0) <- c("x")
    tog.g.o.0 <- as.data.frame(intersect(submin.g.o.0,submax.g.o.0))
    tog.g.o.0 <- count(tog.g.o.0);tog.g.o.0 <- tog.g.o.0[1,1]
    
    colnames(submin.g.d.0) <- c("x"); colnames(submax.g.d.0) <- c("x")
    tog.g.d.0 <- as.data.frame(intersect(submin.g.d.0,submax.g.d.0))
    tog.g.d.0 <- count(tog.g.d.0);tog.g.d.0 <- tog.g.d.0[1,1]
    
    #RCP2.6
    colnames(submin.g.e.2) <- c("x"); colnames(submax.g.e.2) <- c("x") 
    tog.g.e.2 <- intersect(submin.g.e.2,submax.g.e.2)
    tog.g.e.2 <- count(tog.g.e.2);tog.g.e.2 <- tog.g.e.2[1,1]
    
    colnames(submin.g.o.2) <- c("x"); colnames(submax.g.o.2) <- c("x")
    tog.g.o.2 <- as.data.frame(intersect(submin.g.o.2,submax.g.o.2))
    tog.g.o.2 <- count(tog.g.o.2);tog.g.o.2 <- tog.g.o.2[1,1]
    
    colnames(submin.g.d.2) <- c("x"); colnames(submax.g.d.2) <- c("x")
    tog.g.d.2 <- as.data.frame(intersect(submin.g.d.2,submax.g.d.2))
    tog.g.d.2 <- count(tog.g.d.2);tog.g.d.2 <- tog.g.d.2[1,1]
    
    #RCP8.5
    colnames(submin.g.e.8) <- c("x"); colnames(submax.g.e.8) <- c("x") 
    tog.g.e.8 <- intersect(submin.g.e.8,submax.g.e.8)
    tog.g.e.8 <- count(tog.g.e.8);tog.g.e.8 <- tog.g.e.8[1,1]
    
    colnames(submin.g.o.8) <- c("x"); colnames(submax.g.o.8) <- c("x")
    tog.g.o.8 <- as.data.frame(intersect(submin.g.o.8,submax.g.o.8))
    tog.g.o.8 <- count(tog.g.o.8);tog.g.o.8 <- tog.g.o.8[1,1]
    
    colnames(submin.g.d.8) <- c("x"); colnames(submax.g.d.8) <- c("x")
    tog.g.d.8 <- as.data.frame(intersect(submin.g.d.8,submax.g.d.8))
    tog.g.d.8 <- count(tog.g.d.8);tog.g.d.8 <- tog.g.d.8[1,1]
  }
  
  ### End of the loop
  tmp <- as.data.frame(cbind(MinMaxNewRed[i,c(2:13,20:21)]))
  temp <- as.data.frame(cbind(tmp,
                              
                              max.i.t.0, max.i.e.0, max.i.o.0, max.i.d.0,
                              max.i.t.2, max.i.e.2, max.i.o.2, max.i.d.2,
                              max.i.t.8, max.i.e.8, max.i.o.8, max.i.d.8,
                              max.g.t.0, max.g.e.0, max.g.o.0, max.g.d.0,
                              max.g.t.2, max.g.e.2, max.g.o.2, max.g.d.2,
                              max.g.t.8, max.g.e.8, max.g.o.8, max.g.d.8,
                              
                              min.i.t.0, min.i.e.0, min.i.o.0, min.i.d.0,
                              min.i.t.2, min.i.e.2, min.i.o.2, min.i.d.2,
                              min.i.t.8, min.i.e.8, min.i.o.8, min.i.d.8,
                              min.g.t.0, min.g.e.0, min.g.o.0, min.g.d.0,
                              min.g.t.2, min.g.e.2, min.g.o.2, min.g.d.2,
                              min.g.t.8, min.g.e.8, min.g.o.8, min.g.d.8,
                              
                              tog.i.e.0, tog.i.o.0, tog.i.d.0,
                              tog.i.e.2, tog.i.o.2, tog.i.d.2,
                              tog.i.e.8, tog.i.o.8, tog.i.d.8,
                              tog.g.e.0, tog.g.o.0, tog.g.d.0,
                              tog.g.e.2, tog.g.o.2, tog.g.d.2,
                              tog.g.e.8, tog.g.o.8, tog.g.d.8))
  
  CountNew <- rbind(CountNew, temp)
  
  print(paste0("Process: ", i/length(MinMaxNewRed$species)*100, "%"))
  
}; print(paste0("Start: ", h0)); print(paste0("Finish: ", Sys.time()))


write.csv(CountNew, "Data/CountNew.csv")

##### Proportions' determination

CountNew <- import("Data/CountNew.csv")

prop0 <- data.frame(x1=1:length(CountNew$species)) # change according to the number of lines present in "CountNew" 
prop0$projection <- "Current"
prop0 <- cbind(prop0, CountNew[,2:15])

prop0$max.obs.iucn <- CountNew$max.i.o.0/CountNew$max.i.t.0*100
prop0$max.exp.iucn <- CountNew$max.i.e.0/CountNew$max.i.t.0*100
prop0$max.int.iucn <- CountNew$max.i.d.0/CountNew$max.i.t.0*100

prop0$max.obs.gbif <- CountNew$max.g.o.0/CountNew$max.g.t.0*100
prop0$max.exp.gbif <- CountNew$max.g.e.0/CountNew$max.g.t.0*100
prop0$max.int.gbif <- CountNew$max.g.d.0/CountNew$max.g.t.0*100

prop0$min.obs.iucn <- CountNew$min.i.o.0/CountNew$min.i.t.0*100
prop0$min.exp.iucn <- CountNew$min.i.e.0/CountNew$min.i.t.0*100
prop0$min.int.iucn <- CountNew$min.i.d.0/CountNew$min.i.t.0*100

prop0$min.obs.gbif <- CountNew$min.g.o.0/CountNew$min.g.t.0*100
prop0$min.exp.gbif <- CountNew$min.g.e.0/CountNew$min.g.t.0*100
prop0$min.int.gbif <- CountNew$min.g.d.0/CountNew$min.g.t.0*100

prop0$tog.obs.iucn <- CountNew$tog.i.o.0/CountNew$max.i.t.0*100
prop0$tog.exp.iucn <- CountNew$tog.i.e.0/CountNew$max.i.t.0*100
prop0$tog.int.iucn <- CountNew$tog.i.d.0/CountNew$max.i.t.0*100

prop0$tog.obs.gbif <- CountNew$tog.g.o.0/CountNew$max.g.t.0*100
prop0$tog.exp.gbif <- CountNew$tog.g.e.0/CountNew$max.g.t.0*100
prop0$tog.int.gbif <- CountNew$tog.g.d.0/CountNew$max.g.t.0*100

prop2 <- data.frame(x1=1:length(CountNew$species))
prop2$projection <- "RCP2.6"
prop2 <- cbind(prop2, CountNew[,2:15])

prop2$max.obs.iucn <- CountNew$max.i.o.2/CountNew$max.i.t.2*100
prop2$max.exp.iucn <- CountNew$max.i.e.2/CountNew$max.i.t.2*100
prop2$max.int.iucn <- CountNew$max.i.d.2/CountNew$max.i.t.2*100

prop2$max.obs.gbif <- CountNew$max.g.o.2/CountNew$max.g.t.2*100
prop2$max.exp.gbif <- CountNew$max.g.e.2/CountNew$max.g.t.2*100
prop2$max.int.gbif <- CountNew$max.g.d.2/CountNew$max.g.t.2*100

prop2$min.obs.iucn <- CountNew$min.i.o.2/CountNew$min.i.t.2*100
prop2$min.exp.iucn <- CountNew$min.i.e.2/CountNew$min.i.t.2*100
prop2$min.int.iucn <- CountNew$min.i.d.2/CountNew$min.i.t.2*100

prop2$min.obs.gbif <- CountNew$min.g.o.2/CountNew$min.g.t.2*100
prop2$min.exp.gbif <- CountNew$min.g.e.2/CountNew$min.g.t.2*100
prop2$min.int.gbif <- CountNew$min.g.d.2/CountNew$min.g.t.2*100

prop2$tog.obs.iucn <- CountNew$tog.i.o.2/CountNew$max.i.t.2*100
prop2$tog.exp.iucn <- CountNew$tog.i.e.2/CountNew$max.i.t.2*100
prop2$tog.int.iucn <- CountNew$tog.i.d.2/CountNew$max.i.t.2*100

prop2$tog.obs.gbif <- CountNew$tog.g.o.2/CountNew$max.g.t.2*100
prop2$tog.exp.gbif <- CountNew$tog.g.e.2/CountNew$max.g.t.2*100
prop2$tog.int.gbif <- CountNew$tog.g.d.2/CountNew$max.g.t.2*100


prop8 <- data.frame(x1=1:length(CountNew$species))
prop8$projection <- "RCP8.5"
prop8 <- cbind(prop8, CountNew[,2:15])

prop8$max.obs.iucn <- CountNew$max.i.o.8/CountNew$max.i.t.8*100
prop8$max.exp.iucn <- CountNew$max.i.e.8/CountNew$max.i.t.8*100
prop8$max.int.iucn <- CountNew$max.i.d.8/CountNew$max.i.t.8*100

prop8$max.obs.gbif <- CountNew$max.g.o.8/CountNew$max.g.t.8*100
prop8$max.exp.gbif <- CountNew$max.g.e.8/CountNew$max.g.t.8*100
prop8$max.int.gbif <- CountNew$max.g.d.8/CountNew$max.g.t.8*100

prop8$min.obs.iucn <- CountNew$min.i.o.8/CountNew$min.i.t.8*100
prop8$min.exp.iucn <- CountNew$min.i.e.8/CountNew$min.i.t.8*100
prop8$min.int.iucn <- CountNew$min.i.d.8/CountNew$min.i.t.8*100

prop8$min.obs.gbif <- CountNew$min.g.o.8/CountNew$min.g.t.8*100
prop8$min.exp.gbif <- CountNew$min.g.e.8/CountNew$min.g.t.8*100
prop8$min.int.gbif <- CountNew$min.g.d.8/CountNew$min.g.t.8*100

prop8$tog.obs.iucn <- CountNew$tog.i.o.8/CountNew$max.i.t.8*100
prop8$tog.exp.iucn <- CountNew$tog.i.e.8/CountNew$max.i.t.8*100
prop8$tog.int.iucn <- CountNew$tog.i.d.8/CountNew$max.i.t.8*100

prop8$tog.obs.gbif <- CountNew$tog.g.o.8/CountNew$max.g.t.8*100
prop8$tog.exp.gbif <- CountNew$tog.g.e.8/CountNew$max.g.t.8*100
prop8$tog.int.gbif <- CountNew$tog.g.d.8/CountNew$max.g.t.8*100


PropNew <- dplyr::bind_rows(prop0, prop2, prop8)

PropNew[,17:34] <- round(PropNew[,17:34], digits = 2)

write.csv(PropNew, "Data/Prop_All_Hi_HiRe.csv")






#### Plots thermal limits for All species at 2.5'/5' resolution (GBIF vs. GlobTherm) ####

MinMaxNewRed <- import("Data/MinMax_All_HiRe.csv")


### Preparing data 

tmp <- data.frame(x1=1:length(MinMaxNewRed$species))
tmp$data.origin1 <- "IUCN"
tmp$data.origin2 <- "GzBIF"
tmp <- cbind(tmp, MinMaxNewRed$species, MinMaxNewRed$kingdom, MinMaxNewRed$phylum, MinMaxNewRed$class, MinMaxNewRed$order, MinMaxNewRed$family, MinMaxNewRed$genus, MinMaxNewRed$classBis, MinMaxNewRed$Therm, MinMaxNewRed$max.metrics, MinMaxNewRed$min.metrics,
             MinMaxNewRed$max_iucn, MinMaxNewRed$max_gbif, MinMaxNewRed$min_iucn, MinMaxNewRed$min_gbif)

colnames(tmp) <- c("x1", "data.origin1", "data.origin2", "species", "kingdom", "phylum", "class", "order", "family", "genus", "classBis", "Therm", "max.metrics", "min.metrics",
                   "max1", "max2", "min1", "min2")


tmp1 <- data.frame(x1=1:length(MinMaxNewRed$species))
tmp1$data.origin1 <- "GlobTherm"
tmp1$data.origin2 <- "GlobTherm"
tmp1 <- cbind(tmp1, MinMaxNewRed$species, MinMaxNewRed$kingdom, MinMaxNewRed$phylum, MinMaxNewRed$class, MinMaxNewRed$order, MinMaxNewRed$family, MinMaxNewRed$genus, MinMaxNewRed$classBis, MinMaxNewRed$Therm, MinMaxNewRed$max.metrics, MinMaxNewRed$min.metrics,
              MinMaxNewRed$max_exp, MinMaxNewRed$max_exp, MinMaxNewRed$min_exp, MinMaxNewRed$min_exp)

colnames(tmp1) <- c("x1","data.origin1", "data.origin2", "species", "kingdom", "phylum", "class", "order", "family", "genus", "classBis", "Therm", "max.metrics", "min.metrics",
                    "max1", "max2", "min1", "min2")



MinMaxNewVer <- data.frame(x0=1:length(MinMaxNewRed$species)*2)
MinMaxNewVer <- dplyr::bind_rows(tmp, tmp1)


### GBIF vs. GlobTherm

p1 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=max2, fill=data.origin2))+
  stat_compare_means(aes(x=Therm, y=max2, group=data.origin2, label = ..p.signif..), size=3.1, label.y=51, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=max2, group=data.origin2),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#53dfde", "#e1c029") , labels=c("PTL", "RNTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p1


p2 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=min2, fill=data.origin2))+
  stat_compare_means(aes(x=Therm, y=min2, group=data.origin2, label = ..p.signif..), size=3.1, label.y=40, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=min2, group=data.origin2),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#53dfde", "#e1c029") , labels=c("PTL", "RNTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p2

ggarrange(p2,p1, labels = c("", ""), ncol = 2, common.legend = T, legend="bottom")



#### Plots thermal limits for All species at 1° resolution (IUCN vs. GlobTherm) ####

MinMaxNewRed <- import("Data/MinMax_All_LoRe.csv")


### Preparing data 

tmp <- data.frame(x1=1:length(MinMaxNewRed$species))
tmp$data.origin1 <- "IUCN"
tmp$data.origin2 <- "GBIF"
tmp <- cbind(tmp, MinMaxNewRed$species, MinMaxNewRed$kingdom, MinMaxNewRed$phylum, MinMaxNewRed$class, MinMaxNewRed$order, MinMaxNewRed$family, MinMaxNewRed$genus, MinMaxNewRed$classBis, MinMaxNewRed$Therm, MinMaxNewRed$max.metrics, MinMaxNewRed$min.metrics,
             MinMaxNewRed$max_iucn, MinMaxNewRed$max_gbif, MinMaxNewRed$min_iucn, MinMaxNewRed$min_gbif)

colnames(tmp) <- c("x1", "data.origin1", "data.origin2", "species", "kingdom", "phylum", "class", "order", "family", "genus", "classBis", "Therm", "max.metrics", "min.metrics",
                   "max1", "max2", "min1", "min2")


tmp1 <- data.frame(x1=1:length(MinMaxNewRed$species))
tmp1$data.origin1 <- "GlobTherm"
tmp1$data.origin2 <- "GlobTherm"
tmp1 <- cbind(tmp1, MinMaxNewRed$species, MinMaxNewRed$kingdom, MinMaxNewRed$phylum, MinMaxNewRed$class, MinMaxNewRed$order, MinMaxNewRed$family, MinMaxNewRed$genus, MinMaxNewRed$classBis, MinMaxNewRed$Therm, MinMaxNewRed$max.metrics, MinMaxNewRed$min.metrics,
              MinMaxNewRed$max_exp, MinMaxNewRed$max_exp, MinMaxNewRed$min_exp, MinMaxNewRed$min_exp)

colnames(tmp1) <- c("x1","data.origin1", "data.origin2", "species", "kingdom", "phylum", "class", "order", "family", "genus", "classBis", "Therm", "max.metrics", "min.metrics",
                    "max1", "max2", "min1", "min2")



MinMaxNewVer <- data.frame(x0=1:length(MinMaxNewRed$species)*2)
MinMaxNewVer <- dplyr::bind_rows(tmp, tmp1)


### IUCN vs. GlobTherm

p1 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=max1, fill=data.origin1))+
  stat_compare_means(aes(x=Therm, y=max1, group=data.origin1, label = ..p.signif..), size=3.1, label.y=51, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=max1, group=data.origin1),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#53dfde", "#e1c029") , labels=c("PTL", "RNTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p1


p2 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=min1, fill=data.origin1))+
  stat_compare_means(aes(x=Therm, y=min1, group=data.origin1, label = ..p.signif..), size=3.1, label.y=40, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=min1, group=data.origin1),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#53dfde", "#e1c029") , labels=c("PTL", "RNTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p2

ggarrange(p2,p1, labels = c("", ""), ncol = 2, common.legend = T, legend="bottom")


### GBIF vs. GlobTherm       /!\ Not used since gbif provides occurence data -> highest resolution is needed

p1 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=max2, fill=data.origin2))+
  stat_compare_means(aes(x=Therm, y=max2, group=data.origin2, label = ..p.signif..), size=3.1, label.y=51, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=max2, group=data.origin2),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#e1c029", "#53dfde") , labels=c("RNTL", "PTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p1


p2 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=min2, fill=data.origin2))+
  stat_compare_means(aes(x=Therm, y=min2, group=data.origin2, label = ..p.signif..), size=3.1, label.y=40, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=min2, group=data.origin2),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#e1c029", "#53dfde") , labels=c("RNTL", "PTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p2

ggarrange(p2,p1, labels = c("", ""), ncol = 2, common.legend = T, legend="bottom")

#### Plots thermal limits for All species at 2.5'/5' resolution (IUCN vs. GlobTherm) ####

MinMaxNewRed <- import("Data/MinMax_All_HiRe.csv")


### Preparing data 

tmp <- data.frame(x1=1:length(MinMaxNewRed$species))
tmp$data.origin1 <- "IUCN"
tmp$data.origin2 <- "GBIF"
tmp <- cbind(tmp, MinMaxNewRed$species, MinMaxNewRed$kingdom, MinMaxNewRed$phylum, MinMaxNewRed$class, MinMaxNewRed$order, MinMaxNewRed$family, MinMaxNewRed$genus, MinMaxNewRed$classBis, MinMaxNewRed$Therm, MinMaxNewRed$max.metrics, MinMaxNewRed$min.metrics,
             MinMaxNewRed$max_iucn, MinMaxNewRed$max_gbif, MinMaxNewRed$min_iucn, MinMaxNewRed$min_gbif)

colnames(tmp) <- c("x1", "data.origin1", "data.origin2", "species", "kingdom", "phylum", "class", "order", "family", "genus", "classBis", "Therm", "max.metrics", "min.metrics",
                   "max1", "max2", "min1", "min2")


tmp1 <- data.frame(x1=1:length(MinMaxNewRed$species))
tmp1$data.origin1 <- "GlobTherm"
tmp1$data.origin2 <- "GlobTherm"
tmp1 <- cbind(tmp1, MinMaxNewRed$species, MinMaxNewRed$kingdom, MinMaxNewRed$phylum, MinMaxNewRed$class, MinMaxNewRed$order, MinMaxNewRed$family, MinMaxNewRed$genus, MinMaxNewRed$classBis, MinMaxNewRed$Therm, MinMaxNewRed$max.metrics, MinMaxNewRed$min.metrics,
              MinMaxNewRed$max_exp, MinMaxNewRed$max_exp, MinMaxNewRed$min_exp, MinMaxNewRed$min_exp)

colnames(tmp1) <- c("x1","data.origin1", "data.origin2", "species", "kingdom", "phylum", "class", "order", "family", "genus", "classBis", "Therm", "max.metrics", "min.metrics",
                    "max1", "max2", "min1", "min2")



MinMaxNewVer <- data.frame(x0=1:length(MinMaxNewRed$species)*2)
MinMaxNewVer <- dplyr::bind_rows(tmp, tmp1)


### IUCN vs. GlobTherm

p1 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=max1, fill=data.origin1))+
  stat_compare_means(aes(x=Therm, y=max1, group=data.origin1, label = ..p.signif..), size=3.1, label.y=51, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=max1, group=data.origin1),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#53dfde", "#e1c029") , labels=c("PTL", "RNTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p1


p2 <- ggplot(MinMaxNewVer)+
  geom_boxplot(aes(x=Therm, y=min1, fill=data.origin1))+
  stat_compare_means(aes(x=Therm, y=min1, group=data.origin1, label = ..p.signif..), size=3.1, label.y=40, vjust=T, method="wilcox.test")+
  stat_summary(aes(x=Therm, y=min1, group=data.origin1),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  labs(fill = NULL)+
  scale_fill_manual(values=c("#53dfde", "#e1c029") , labels=c("PTL", "RNTL"))+
  xlab(NULL)+
  ylab("Temperature [°C]"); p2

ggarrange(p2,p1, labels = c("", ""), ncol = 2, common.legend = T, legend="bottom")


#### Plots proportion of suitable cells within geographic range (2.5'/5' resolution) based on High (2.5'/5') Resolution limits (GBIF data) ####

PropNew <- import("Data/Prop_All_Hi_HiRe.csv")


### suitability based on GBIF and GlobTherm

p1 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, min.obs.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=min.obs.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=min.obs.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100), limits = c(0,110))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNTL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#ebcf4f","#e1c029", "#e19e29"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_text(size=10),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p1

# to have p-values: label="p.format"
# to have mean values put "label=round(..y..,2)" in the aes of stat_summary and change geom="point" by "text"

p2 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, max.obs.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=max.obs.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=max.obs.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#ebcf4f","#e1c029", "#e19e29"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p2

p7 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, tog.obs.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=tog.obs.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=tog.obs.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#ebcf4f","#e1c029", "#e19e29"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p7

plot <- ggarrange(p1,p2,p7, ncol=3, common.legend = T, widths = c(1,0.8,0.8), legend = "right"); plot

p3 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, min.exp.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=min.exp.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=min.exp.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("PTL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#a6f4f3","#53dfde","#17c5c4"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_text(size=10),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p3

p4 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, max.exp.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=max.exp.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=max.exp.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("PNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#a6f4f3","#53dfde","#17c5c4"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p4

p8 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, tog.exp.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=tog.exp.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=tog.exp.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#a6f4f3","#53dfde","#17c5c4"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p8

plot1 <- ggarrange(p3,p4,p8, ncol=3, common.legend = T,widths = c(1,0.8,0.8), legend = "right"); plot1

p5 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, min.int.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=min.int.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=min.int.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("cross suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#76e353","#34cb30", "#0d9c09"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_text(size=10),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8, angle = 90, hjust=1, vjust=0.5),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        legend.position = "top"); p5

p6 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, max.int.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=max.int.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=max.int.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("cross suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#76e353","#34cb30", "#0d9c09"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8, angle = 90, hjust=1, vjust=0.5),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        legend.position = "top"); p6

p9 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, tog.int.gbif, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=tog.int.gbif, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=tog.int.gbif, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("cross suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#76e353","#34cb30", "#0d9c09"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8, angle = 90, hjust=1, vjust=0.5),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        legend.position = "top"); p9

plot2 <- ggarrange(p5,p6,p9, ncol=3, common.legend = T,widths = c(1,0.8,0.8), legend = "right"); plot2
plot3 <- ggarrange(plot,plot1,plot2, ncol=1, heights = c(0.85,0.85,1)); plot3


#### Plots proportion of suitable cells within geographic range (2.5'/5' resolution) based on Low (1°) Resolution limits (IUCN data) ####

PropNew <- import("Data/Prop_All_Hi_LoRe.csv")


### suitability based on IUCN and GlobTherm

p1 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, min.obs.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=min.obs.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=min.obs.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100), limits = c(0,110))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNTL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#ebcf4f","#e1c029", "#e19e29"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_text(size=10),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p1

# to have p-values: label="p.format"
# to have mean values put "label=round(..y..,2)" in the aes of stat_summary and change geom="point" by "text"

p2 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, max.obs.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=max.obs.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=max.obs.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#ebcf4f","#e1c029", "#e19e29"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p2

p7 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, tog.obs.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=tog.obs.iucn, group=projection, label=..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=tog.obs.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#ebcf4f","#e1c029", "#e19e29"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p7

plot <- ggarrange(p1,p2,p7, ncol=3, common.legend = T, widths = c(1,0.8,0.8), legend = "right"); plot

p3 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, min.exp.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=min.exp.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=min.exp.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("PTL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#a6f4f3","#53dfde","#17c5c4"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_text(size=10),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p3

p4 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, max.exp.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=max.exp.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=max.exp.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("PNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#a6f4f3","#53dfde","#17c5c4"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p4

p8 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, tog.exp.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=tog.exp.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=tog.exp.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("RNL suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#a6f4f3","#53dfde","#17c5c4"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text = element_text(size = 8),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        axis.text.x = element_blank(), 
        legend.position = "top"); p8

plot1 <- ggarrange(p3,p4,p8, ncol=3, common.legend = T,widths = c(1,0.8,0.8), legend = "right"); plot1

p5 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, min.int.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=min.int.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=min.int.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("cross suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#76e353","#34cb30", "#0d9c09"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_text(size=10),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8, angle = 90, hjust=1, vjust=0.5),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        legend.position = "top"); p5

p6 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, max.int.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=max.int.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=max.int.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("cross suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#76e353","#34cb30", "#0d9c09"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8, angle = 90, hjust=1, vjust=0.5),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        legend.position = "top"); p6

p9 <- ggplot(PropNew)+
  geom_boxplot(aes(Therm, tog.int.iucn, fill=projection), na.rm=T)+
  stat_compare_means(aes(x=Therm, y=tog.int.iucn, group=projection, label = ..p.signif..), size=3.1, label.y=110, vjust=T, method="kruskal.test")+
  stat_summary(aes(x=Therm, y=tog.int.iucn, group=projection),position=position_dodge(width=0.75), geom="point", fun="mean", col = "black", size = 3, shape = 21, fill="red")+
  scale_y_continuous(breaks=c(0,25,50,75,100))+
  labs(fill = element_blank())+
  xlab(NULL)+
  ylab("cross suitability\n[% of geographic range]")+
  scale_fill_manual(values=c("#76e353","#34cb30", "#0d9c09"), labels=c("Current", "2100 (RCP 2.6)", "2100 (RCP 8.5)"))+
  theme(axis.title.y = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8, angle = 90, hjust=1, vjust=0.5),
        legend.text = element_text(size=8),
        legend.title = element_text(size=9),
        legend.position = "top"); p9

plot2 <- ggarrange(p5,p6,p9, ncol=3, common.legend = T,widths = c(1,0.8,0.8), legend = "right"); plot2
plot3 <- ggarrange(plot,plot1,plot2, ncol=1, heights = c(0.85,0.85,1)); plot3



#### Plots suitability ranges Pseudonaja textilis (2.5° resolution) ####

act5 <- clim[[5]] / 10
act6 <- clim[[6]] / 10

f2.5 <- raster("wc_126_2100/band5.tif")
f2.6 <- raster("wc_126_2100/band6.tif")

f8.5 <- raster("wc_585_2100/band5.tif")
f8.6 <- raster("wc_585_2100/band6.tif")

MinMaxNewRed <- import("Data/MinMax_All_LoRe.csv")

i <- which(MinMaxNewRed$species=="Pseudonaja textilis")

sp.iucn <- IUCN[IUCN$binomial == "Pseudonaja textilis",]


map <- map_data("world", region = c("Australia"))


mask <- crop(act5, sp.iucn)
mask <- mask(mask, sp.iucn)
mask <- rasterToPoints(mask, spatial = T)
mask <- data.frame(mask)

maskbis <- mask[,-1]
r <- rasterFromXYZ(maskbis)
pp <- rasterToPolygons(r, dissolve=T)
outline <- fortify(pp)



### Current

ras5 <- mask(act5, sp.iucn)
ras6 <- mask(act6, sp.iucn)


m1.1 <- ras5 <= MinMaxNewRed$max_iucn[i]
un1.1 <- m1.1==0 
un1.1[un1.1==0] <- NA
unsu1.1 <- rasterToPoints(un1.1, spatial = T)
unsui1.1 <- data.frame(unsu1.1)

m1.2 <- ras6 >= MinMaxNewRed$min_iucn[i]
un1.2 <- m1.2==0 
un1.2[un1.2==0] <- NA
unsu1.2 <- rasterToPoints(un1.2, spatial = T)
unsui1.2 <- data.frame(unsu1.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un1.3 <- mask(un1.1,un1.2)
#unsu1.3 <- rasterToPoints(un1.3, spatial = T)
#unsui1.3 <- data.frame(unsu1.3)

p1 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui1.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui1.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#e1c029", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p1


m2.1 <- ras5 <= MinMaxNewRed$max_exp[i]
un2.1 <- m2.1==0 
un2.1[un2.1==0] <- NA
unsu2.1 <- rasterToPoints(un2.1, spatial = T)
unsui2.1 <- data.frame(unsu2.1)

m2.2 <- ras6 >= MinMaxNewRed$min_exp[i]
un2.2 <- m2.2==0 
un2.2[un2.2==0] <- NA
unsu2.2 <- rasterToPoints(un2.2, spatial = T)
unsui2.2 <- data.frame(unsu2.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un2.3 <- mask(un2.1,un2.2)
#unsu2.3 <- rasterToPoints(un2.3, spatial = T)
#unsui2.3 <- data.frame(unsu2.3)

p2 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  #geom_tile(data=unsui2.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui2.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#53dfde", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p2


m3.1 <- m1.1 + m2.1
un3.1 <- m3.1 < 2 
un3.1[un3.1==0] <- NA
unsu3.1 <- rasterToPoints(un3.1, spatial = T)
unsui3.1 <- data.frame(unsu3.1)

m3.2 <- m1.2 + m2.2
un3.2 <- m3.2 < 2 
un3.2[un3.2==0] <- NA
unsu3.2 <- rasterToPoints(un3.2, spatial = T)
unsui3.2 <- data.frame(unsu3.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un3.3 <- mask(un3.1,un3.2)
#unsu3.3 <- rasterToPoints(un3.3, spatial = T)
#unsui3.3 <- data.frame(unsu3.3)

p3 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui3.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui3.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#34cb30", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p3



### 2100 (RCP 2.6)

ras5 <- mask(f2.5, sp.iucn)
ras6 <- mask(f2.6, sp.iucn)


m1.1 <- ras5 <= MinMaxNewRed$max_iucn[i]
un1.1 <- m1.1==0 
un1.1[un1.1==0] <- NA
unsu1.1 <- rasterToPoints(un1.1, spatial = T)
unsui1.1 <- data.frame(unsu1.1)

m1.2 <- ras6 >= MinMaxNewRed$min_iucn[i]
un1.2 <- m1.2==0 
un1.2[un1.2==0] <- NA
unsu1.2 <- rasterToPoints(un1.2, spatial = T)
unsui1.2 <- data.frame(unsu1.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un1.3 <- mask(un1.1,un1.2)
#unsu1.3 <- rasterToPoints(un1.3, spatial = T)
#unsui1.3 <- data.frame(unsu1.3)

p4 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui1.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui1.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#e1c029", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p4


m2.1 <- ras5 <= MinMaxNewRed$max_exp[i]
un2.1 <- m2.1==0 
un2.1[un2.1==0] <- NA
unsu2.1 <- rasterToPoints(un2.1, spatial = T)
unsui2.1 <- data.frame(unsu2.1)

m2.2 <- ras6 >= MinMaxNewRed$min_exp[i]
un2.2 <- m2.2==0 
un2.2[un2.2==0] <- NA
unsu2.2 <- rasterToPoints(un2.2, spatial = T)
unsui2.2 <- data.frame(unsu2.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un2.3 <- mask(un2.1,un2.2)
#unsu2.3 <- rasterToPoints(un2.3, spatial = T)
#unsui2.3 <- data.frame(unsu2.3)

p5 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  #geom_tile(data=unsui2.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui2.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#53dfde", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p5


m3.1 <- m1.1 + m2.1
un3.1 <- m3.1 < 2 
un3.1[un3.1==0] <- NA
unsu3.1 <- rasterToPoints(un3.1, spatial = T)
unsui3.1 <- data.frame(unsu3.1)


m3.2 <- m1.2 + m2.2
un3.2 <- m3.2 < 2 
un3.2[un3.2==0] <- NA
unsu3.2 <- rasterToPoints(un3.2, spatial = T)
unsui3.2 <- data.frame(unsu3.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un3.3 <- mask(un3.1,un3.2)
#unsu3.3 <- rasterToPoints(un3.3, spatial = T)
#unsui3.3 <- data.frame(unsu3.3)

p6 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui3.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui3.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#34cb30", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p6


### 2100 (RCP 8.5)

ras5 <- mask(f8.5, sp.iucn)
ras6 <- mask(f8.6, sp.iucn)


m1.1 <- ras5 <= MinMaxNewRed$max_iucn[i]
un1.1 <- m1.1==0 
un1.1[un1.1==0] <- NA
unsu1.1 <- rasterToPoints(un1.1, spatial = T)
unsui1.1 <- data.frame(unsu1.1)

m1.2 <- ras6 >= MinMaxNewRed$min_iucn[i]
un1.2 <- m1.2==0 
un1.2[un1.2==0] <- NA
unsu1.2 <- rasterToPoints(un1.2, spatial = T)
unsui1.2 <- data.frame(unsu1.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un1.3 <- mask(un1.1,un1.2)
#unsu1.3 <- rasterToPoints(un1.3, spatial = T)
#unsui1.3 <- data.frame(unsu1.3)

p7 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui1.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui1.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#e1c029", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p7


m2.1 <- ras5 <= MinMaxNewRed$max_exp[i]
un2.1 <- m2.1==0 
un2.1[un2.1==0] <- NA
unsu2.1 <- rasterToPoints(un2.1, spatial = T)
unsui2.1 <- data.frame(unsu2.1)

m2.2 <- ras6 >= MinMaxNewRed$min_exp[i]
un2.2 <- m2.2==0 
un2.2[un2.2==0] <- NA
unsu2.2 <- rasterToPoints(un2.2, spatial = T)
unsui2.2 <- data.frame(unsu2.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un2.3 <- mask(un2.1,un2.2)
#unsu2.3 <- rasterToPoints(un2.3, spatial = T)
#unsui2.3 <- data.frame(unsu2.3)

p8 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui2.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui2.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#53dfde", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p8


m3.1 <- m1.1 + m2.1
un3.1 <- m3.1 < 2 
un3.1[un3.1==0] <- NA
unsu3.1 <- rasterToPoints(un3.1, spatial = T)
unsui3.1 <- data.frame(unsu3.1)


m3.2 <- m1.2 + m2.2
un3.2 <- m3.2 < 2 
un3.2[un3.2==0] <- NA
unsu3.2 <- rasterToPoints(un3.2, spatial = T)
unsui3.2 <- data.frame(unsu3.2)

#(if some cells are unsuitable at cold-end and warm-end)
#un3.3 <- mask(un3.1,un3.2)
#unsu3.3 <- rasterToPoints(un3.3, spatial = T)
#unsui3.3 <- data.frame(unsu3.3)

p9 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui3.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui3.2, aes(x=x, y=y, fill="t4"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN geographic range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t1= "gray", t2="#34cb30", t3="#e12c00", t4="#0040b1"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=2)); p9


### changes between current and 2100 (RCP 8.5)

res5 <- mask(act5, sp.iucn); res5 <- crop(res5, sp.iucn)
res6 <- mask(act6, sp.iucn); res6 <- crop(res6, sp.iucn)

ros5 <- mask(f8.5, sp.iucn); ros5 <- crop(ros5, sp.iucn)
ros6 <- mask(f8.6, sp.iucn); ros6 <- crop(ros6, sp.iucn)


m1.1 <- res5 <= MinMaxNewRed$max_iucn[i]
un1.1 <- m1.1==0 

m1.2 <- ros5 <= MinMaxNewRed$max_iucn[i]
un1.2 <- m1.2==0 

un1.3 <- un1.1 + un1.2

uns1.1 <- un1.3==2
uns1.1[uns1.1==0] <- NA
unsu1.1 <- rasterToPoints(uns1.1, spatial = T)
unsui1.1 <- data.frame(unsu1.1)

los1.1 <- un1.3==1
los1.1[los1.1==0] <- NA
loss1.1 <- rasterToPoints(los1.1, spatial = T)
loss1.1 <- data.frame(loss1.1)


m2.1 <- res6 >= MinMaxNewRed$min_iucn[i]
un2.1 <- m2.1==0 

m2.2 <- ros6 >= MinMaxNewRed$min_iucn[i]
un2.2 <- m2.2==0 

un2.3 <- un2.1 + un2.2

uns2.1 <- un2.3==2
uns2.1[uns2.1==0] <- NA
unsu2.1 <- rasterToPoints(uns2.1, spatial = T)
unsui2.1 <- data.frame(unsu2.1)

gai1.1 <- un2.3==1
gai1.1[gai1.1==0] <- NA
gain1.1 <- rasterToPoints(gai1.1, spatial = T)
gain1.1 <- data.frame(gain1.1)

ctow <- gai1.1+los1.1
cotowa <- rasterToPoints(ctow, spatial = T)
cotowa <- data.frame(cotowa)

p10 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui1.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui2.1, aes(x=x, y=y, fill="t4"))+
  geom_tile(data=loss1.1, aes(x=x, y=y, fill="t5"))+
  geom_tile(data=gain1.1, aes(x=x, y=y, fill="t6"))+
  #geom_tile(data=cotowa, aes(x=x, y=y, fill="t7"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t2="#e1c029",t2.2="#53dfde",t2.3="#34cb30",t3="#e12c00",t4="#0040b1",t5="#da7d00",t6="#0c8500", t7="#a800da", t8="#ffcafc",t1= "gray"),  
                    labels=c('"RNTL Suitability" areas','"PTL Suitability" areas', '"cross Suitability" areas' , "Unsuitable areas (warm)", "Unsuitable areas (cold)", "Loss of Suitability", "Gain of Suitability", "Unsuitable (c to w)", "Unsuitable (w to c)", "Background"))+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=3)); p10


m1.1 <- res5 <= MinMaxNewRed$max_exp[i]
un1.1 <- m1.1==0 

m1.2 <- ros5 <= MinMaxNewRed$max_exp[i]
un1.2 <- m1.2==0 

un1.3 <- un1.1 + un1.2

uns1.1 <- un1.3==2
uns1.1[uns1.1==0] <- NA
unsu1.1 <- rasterToPoints(uns1.1, spatial = T)
unsui1.1 <- data.frame(unsu1.1)

los1.1 <- un1.3==1
los1.1[los1.1==0] <- NA
loss1.1 <- rasterToPoints(los1.1, spatial = T)
loss1.1 <- data.frame(loss1.1)


m2.1 <- res6 >= MinMaxNewRed$min_exp[i]
un2.1 <- m2.1==0 

m2.2 <- ros6 >= MinMaxNewRed$min_exp[i]
un2.2 <- m2.2==0 

un2.3 <- un2.1 + un2.2

uns2.1 <- un2.3==2
uns2.1[uns2.1==0] <- NA
unsu2.1 <- rasterToPoints(uns2.1, spatial = T)
unsui2.1 <- data.frame(unsu2.1)

gai1.1 <- un2.3==1
gai1.1[gai1.1==0] <- NA
gain1.1 <- rasterToPoints(gai1.1, spatial = T)
gain1.1 <- data.frame(gain1.1)

ctow <- gai1.1+los1.1
cotowa <- rasterToPoints(ctow, spatial = T)
cotowa <- data.frame(cotowa)

p11 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  #geom_tile(data=unsui1.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui2.1, aes(x=x, y=y, fill="t4"))+
  geom_tile(data=loss1.1, aes(x=x, y=y, fill="t5"))+
  geom_tile(data=gain1.1, aes(x=x, y=y, fill="t6"))+
  geom_tile(data=cotowa, aes(x=x, y=y, fill="t7"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t2.1="#e1c029",t2="#53dfde",t2.3="#34cb30",t3="#e12c00",t4="#0040b1",t5="#da7d00",t6="#0c8500",t7="#a800da",t1= "gray"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=3)); p11


m1.1 <- res5 <= MinMaxNewRed$max_iucn[i]
m1.2 <- res5 <= MinMaxNewRed$max_exp[i]
m1.3 <- m1.1 + m1.2
un1.1 <- m1.3 < 2

m1.4 <- ros5 <= MinMaxNewRed$max_iucn[i]
m1.5 <- ros5 <= MinMaxNewRed$max_exp[i]
m1.6 <- m1.4 + m1.5
un1.2 <- m1.6 < 2

un1.3 <- un1.1 + un1.2

uns1.1 <- un1.3==2
uns1.1[uns1.1==0] <- NA
unsu1.1 <- rasterToPoints(uns1.1, spatial = T)
unsui1.1 <- data.frame(unsu1.1)

los1.1 <- un1.3==1
los1.1[los1.1==0] <- NA
loss1.1 <- rasterToPoints(los1.1, spatial = T)
loss1.1 <- data.frame(loss1.1)

m2.1 <- res6 >= MinMaxNewRed$min_iucn[i]
m2.2 <- res6 >= MinMaxNewRed$min_exp[i]
m2.3 <- m2.1 + m2.2
un2.1 <- m2.3 < 2

m2.4 <- ros6 >= MinMaxNewRed$min_iucn[i]
m2.5 <- ros6 >= MinMaxNewRed$min_exp[i]
m2.6 <- m2.4 + m2.5
un2.2 <- m2.6 < 2

un2.3 <- un2.1 + un2.2

uns2.1 <- un2.3==2
uns2.1[uns2.1==0] <- NA
unsu2.1 <- rasterToPoints(uns2.1, spatial = T)
unsui2.1 <- data.frame(unsu2.1)

gai1.1 <- un2.3==1
gai1.1[gai1.1==0] <- NA
gain1.1 <- rasterToPoints(gai1.1, spatial = T)
gain1.1 <- data.frame(gain1.1)

ctow <- gai1.1+los1.1
cotowa <- rasterToPoints(ctow, spatial = T)
cotowa <- data.frame(cotowa)

p12 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group, fill="t1"))+
  geom_tile(data=mask, aes(x=x, y=y, fill="t2"))+
  geom_tile(data=unsui1.1, aes(x=x, y=y, fill="t3"))+
  geom_tile(data=unsui2.1, aes(x=x, y=y, fill="t4"))+
  geom_tile(data=loss1.1, aes(x=x, y=y, fill="t5"))+
  geom_tile(data=gain1.1, aes(x=x, y=y, fill="t6"))+
  geom_tile(data=cotowa, aes(x=x, y=y, fill="t7"))+
  geom_path(aes(x = long, y = lat, group=group, col="black"), data = outline, size=1)+
  scale_color_manual(name="", values="#494945", labels="IUCN range")+
  coord_fixed(xlim = c(112, 154), ylim = c(-45, -10), ratio=1)+
  scale_fill_manual(name="" ,values=c(t2.1="#e1c029",t2.2="#53dfde",t2="#34cb30",t3="#e12c00",t4="#0040b1",t5="#da7d00",t6="#0c8500",t7="#a800da",t1= "gray"),  
                    labels=element_blank())+
  theme_void(base_size = 10)+
  theme(legend.position = c(0.82,0.15), panel.border = element_rect(colour="white",fill=NA, size=5), legend.key.size=unit(.7, "lines"), legend.text = element_text(size = 8))+
  guides(fill=guide_legend(nrow=3)); p12

### common figure

plot <- ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9, nrow=3, ncol=3, common.legend = T, legend="none");plot
plot1 <- annotate_figure(plot, top = text_grob("..", 
                                               hjust=0.5, face = "bold", color = "white"),
                         left = text_grob("..", 
                                          vjust=0.5, face = "bold", color = "white", rot = 90));plot1

plot2 <- ggarrange(p10,p11,p12, nrow=1, ncol=3, common.legend = T, legend = "bottom");plot2
plot3 <- annotate_figure(plot2, top = text_grob("..", 
                                               hjust=0.5, face = "bold", color = "white", size = 10),
                         left = text_grob("..", 
                                          vjust=0.5, face = "bold", color = "white", rot = 90),
                         bottom = text_grob("..", 
                                         hjust=0.5, face = "bold", color = "white", size = 5));plot3

plot4 <- ggarrange(plot1,plot3, nrow=2, heights = c(3,1.4)); plot4


#### Explanatory figures ####

bio5 <- clim[[5]] / 10
bio6 <- clim[[6]] / 10
bio5 <- aggregate(bio5, fact=24); bio5 <- round(bio5, digits = 2)
bio6 <- aggregate(bio6, fact=24); bio6 <- round(bio6, digits = 2)

bio5 <- raster("wc_126_2100/band5.tif")
bio6 <- raster("wc_126_2100/band6.tif")
bio5 <- aggregate(bio5, fact=24); bio5 <- round(bio5, digits = 2)
bio6 <- aggregate(bio6, fact=24); bio6 <- round(bio6, digits = 2)

bio5 <- raster("wc_585_2100/band5.tif")
bio6 <- raster("wc_585_2100/band6.tif")
bio5 <- aggregate(bio5, fact=24); bio5 <- round(bio5, digits = 2)
bio6 <- aggregate(bio6, fact=24); bio6 <- round(bio6, digits = 2)

sp.iucn <- IUCN[IUCN$binomial == sp.names$species[3],]
plot(sp.iucn)


map <- map_data("world", region = c("Liberia", "Sierra", "Ivory", "Guinea"), boundaries=T)

mask <- crop(bio5, sp.iucn)
mask <- mask(mask, sp.iucn)
mask <- rasterToPoints(mask, spatial = T)
mask <- data.frame(mask)
maskbis <- mask[,-1]
r <- rasterFromXYZ(maskbis)
pp <- rasterToPolygons(r, dissolve=T)
outline <- fortify(pp)

p1 <- ggplot(map)+
  geom_polygon( aes(x=long, y=lat, group=group), fill="grey", color="black")+
  geom_raster(data=mask, aes(x=x, y=y), fill="green", alpha=0.5)+
  geom_path(aes(x = long, y = lat, group=group), col="red", data = outline, size=1)+
  coord_fixed(ratio=1)+
  xlab("Longitude")+
  ylab("Latitude")+
  theme(axis.title.x = element_text(size=35), axis.title.y = element_text(size=35), axis.text = element_blank()); p1



crop <- crop(bio5, sp.iucn)
crop <- mask(crop, sp.iucn)
crop <- rasterToPoints(crop, spatial = T)
crop1 <- data.frame(crop)

crop <- crop(bio6, sp.iucn)
crop <- mask(crop, sp.iucn)
crop <- rasterToPoints(crop, spatial = T)
crop2 <- data.frame(crop)


ggplot()+
  geom_raster(data=crop1, aes(x=x, y=y, fill=layer))+
  geom_path(aes(x = long, y = lat, group=group), col="black", data = outline, size=1)+
  coord_fixed( ratio=1)+
  theme_void(base_size = 10)+
  scale_fill_viridis()+
  theme(legend.position = "none")

ggplot()+
  geom_raster(data=crop2, aes(x=x, y=y, fill=layer))+
  geom_path(aes(x = long, y = lat, group=group), col="black", data = outline, size=1)+
  coord_fixed( ratio=1)+
  theme_void(base_size = 10)+
  scale_fill_viridis()+
  theme(legend.position = "none")


a <- 15
b <- 40
c <- a + (b-a)/4
d <- b - (b-a)/4

e <- -20
f <- 5
g <- e + (f-e)/4
h <- f - (f-e)/4



p1 <- ggplot()+
  geom_hline(aes( yintercept = 1.2),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a, y = 1.2, xend = b, yend = 1.2))+
  geom_curve(aes(x = a, y = 1.2, xend = c, yend = 1.3), curvature = 0.15)+
  geom_curve(aes(x = c, y = 1.3, xend = d, yend = 1.3), curvature = -0.4)+
  geom_curve(aes(x = d, y = 1.3, xend = b, yend = 1.2), curvature = 0.15)+
  
  geom_hline(aes( yintercept = -0.2),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e, y = -0.2, xend = f, yend = -0.2))+
  geom_curve(aes(x = e, y = -0.2, xend = g, yend = -0.1), curvature = 0.15)+
  geom_curve(aes(x = g, y = -0.1, xend = h, yend = -0.1), curvature = -0.4)+
  geom_curve(aes(x = h, y = -0.1, xend = f, yend = -0.2), curvature = 0.15)+
  
  geom_vline(aes( xintercept = 40),color= "blue", linetype="dashed", size = 1)+
  geom_vline(aes( xintercept = 46),color= "red", linetype="dashed", size=1 )+ 
  #geom_vline(aes( xintercept = 34),color= "#d51f1f", linetype="dashed", size=1 )+
  annotate("text", x = 42.2, y = 0.4, label = "RNTLw", angle=-90, size=4.8)+
  annotate("text", x = 48.2, y = 0.4, label = "PTLw", angle=-90, size=4.8)+
  #annotate("text", x = 36.2, y = 0.3, label = "not expected  FL  upper  bound", angle=-90, size=4.8)+
  
  geom_vline(aes( xintercept = -20),color= "blue", linetype="dashed", size = 1)+
  geom_vline(aes( xintercept = -26),color= "red", linetype="dashed", size=1 )+ 
  #geom_vline(aes( xintercept = -14),color= "red", linetype="dashed", size=1 )+
  annotate("text", x = -17.8, y = 0.75, label = "RNTLc", angle=-90, size=4.8)+
  annotate("text", x = -23.8, y = 0.75, label = "PTLc", angle=-90, size=4.8)+
  #annotate("text", x = -11.8, y = 0.75, label = "not expected  FL  lower  bound", angle=-90, size=4.8)+
  
  ylab(element_blank())+
  xlab("Temperature")+
  scale_x_continuous(limits = c(-30,50))+
  scale_y_continuous(limits = c(-0.4,1.5))+
  theme_minimal()+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none",axis.title.x = element_text(size=15), axis.text.x = element_blank(), axis.text.y=element_blank(), axis.line.x = element_line(color= "black", linetype = "solid")); p1



#### Explanatory panel for IUCN data

p1 <- ggplot()+
  geom_hline(aes( yintercept = 4.23),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a, y = 4.23, xend = b, yend = 4.23))+
  geom_curve(aes(x = a, y = 4.23, xend = c, yend = 4.33), curvature = 0.15)+
  geom_curve(aes(x = c, y = 4.33, xend = d, yend = 4.33), curvature = -0.4)+
  geom_curve(aes(x = d, y = 4.33, xend = b, yend = 4.23), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 3.53),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a+4.5, y = 3.53, xend = b+4.5, yend = 3.53))+
  geom_curve(aes(x = a+4.5, y = 3.53, xend = c+4.5, yend = 3.63), curvature = 0.15)+
  geom_curve(aes(x = c+4.5, y = 3.63, xend = d+4.5, yend = 3.63), curvature = -0.4)+
  geom_curve(aes(x = d+4.5, y = 3.63, xend = b+4.5, yend = 3.53), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 2.83),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a+9, y = 2.83, xend = b+9, yend = 2.83))+
  geom_curve(aes(x = a+9, y = 2.83, xend = c+9, yend = 2.93), curvature = 0.15)+
  geom_curve(aes(x = c+9, y = 2.93, xend = d+9, yend = 2.93), curvature = -0.4)+
  geom_curve(aes(x = d+9, y = 2.93, xend = b+9, yend = 2.83), curvature = 0.15)+
  
  
  
  geom_hline(aes( yintercept = 4.2),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e, y = 4.2, xend = f, yend = 4.2))+
  geom_curve(aes(x = e, y = 4.2, xend = g, yend = 4.3), curvature = 0.15)+
  geom_curve(aes(x = g, y = 4.3, xend = h, yend = 4.3), curvature = -0.4)+
  geom_curve(aes(x = h, y = 4.3, xend = f, yend = 4.2), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 3.5),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e+4.5, y = 3.5, xend = f+4.5, yend = 3.5))+
  geom_curve(aes(x = e+4.5, y = 3.5, xend = g+4.5, yend = 3.6), curvature = 0.15)+
  geom_curve(aes(x = g+4.5, y = 3.6, xend = h+4.5, yend = 3.6), curvature = -0.4)+
  geom_curve(aes(x = h+4.5, y = 3.6, xend = f+4.5, yend = 3.5), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 2.8),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e+9, y = 2.8, xend = f+9, yend = 2.8))+
  geom_curve(aes(x = e+9, y = 2.8, xend = g+9, yend = 2.9), curvature = 0.15)+
  geom_curve(aes(x = g+9, y = 2.9, xend = h+9, yend = 2.9), curvature = -0.4)+
  geom_curve(aes(x = h+9, y = 2.9, xend = f+9, yend = 2.8), curvature = 0.15)+
 
  
  
  geom_segment(mapping=aes(x=-18, y=4.15, xend=38, yend=4.15), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#ebcf4f") +
  geom_segment(mapping=aes(x=-12, y=4.05, xend=38, yend=4.05), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#34cb30") +
  geom_segment(mapping=aes(x=-12, y=4.1, xend=44, yend=4.1), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#53dfde") +
   
  geom_segment(mapping=aes(x=-18, y=3.45, xend=38, yend=3.45), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#ebcf4f") +
  geom_segment(mapping=aes(x=-12, y=3.35, xend=38, yend=3.35), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#34cb30") +
  geom_segment(mapping=aes(x=-12, y=3.40, xend=44, yend=3.40), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#53dfde") +
  
  geom_segment(mapping=aes(x=-18, y=2.75, xend=38, yend=2.75), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#ebcf4f") +
  geom_segment(mapping=aes(x=-12, y=2.65, xend=38, yend=2.65), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#34cb30") +
  geom_segment(mapping=aes(x=-12, y=2.70, xend=44, yend=2.70), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#53dfde") +
  
  
  
  geom_vline(aes( xintercept = 38),color= "blue", linetype="dashed", size = 1)+
  geom_vline(aes( xintercept = 44),color= "red", linetype="dashed", size=1 )+ 
  #geom_vline(aes( xintercept = 34),color= "red", linetype="dashed", size=0.5 )+
  annotate("text", x = 39.6, y = 4.52, label = "RNTLw", angle=-90, size=4.8)+
  annotate("text", x = 45.6, y = 4.52, label = "PTLw", angle=-90, size=4.8)+
  #annotate("text", x = 36.2, y = 1.8, label = "not expected PL  upper  bound", angle=-90, size=4.8)+
  
  geom_vline(aes( xintercept = -18),color= "blue", linetype="dashed", size = 1)+
  geom_vline(aes( xintercept = -12),color= "red", linetype="dashed", size=1 )+ 
  #geom_vline(aes( xintercept = -14),color= "red", linetype="dashed", size=0.5 )+
  annotate("text", x = -16.4, y = 4.52, label = "RNTLc", angle=-90, size=4.8)+
  annotate("text", x = -10.4, y = 4.52, label = "PTLc", angle=-90, size=4.8)+
  #annotate("text", x = -11.8, y = 3.5, label = "not expected PL  lower  bound", angle=-90, size=4.8)+
  
  ylab(element_blank())+
  xlab("Temperature")+
  scale_y_continuous(limits = c(2.65,4.6))+
  theme_minimal()+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none",axis.title.x = element_text(size=15), axis.text.x = element_blank(), axis.text.y=element_blank(), axis.line.x = element_line(color= "black", linetype = "solid")); p1


#### Explanatory panel for GBIF data

p1 <- ggplot()+
  geom_hline(aes( yintercept = 4.23),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a, y = 4.23, xend = b, yend = 4.23))+
  geom_curve(aes(x = a, y = 4.23, xend = c, yend = 4.33), curvature = 0.15)+
  geom_curve(aes(x = c, y = 4.33, xend = d, yend = 4.33), curvature = -0.4)+
  geom_curve(aes(x = d, y = 4.33, xend = b, yend = 4.23), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 3.53),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a+4.5, y = 3.53, xend = b+4.5, yend = 3.53))+
  geom_curve(aes(x = a+4.5, y = 3.53, xend = c+4.5, yend = 3.63), curvature = 0.15)+
  geom_curve(aes(x = c+4.5, y = 3.63, xend = d+4.5, yend = 3.63), curvature = -0.4)+
  geom_curve(aes(x = d+4.5, y = 3.63, xend = b+4.5, yend = 3.53), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 2.83),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = a+9, y = 2.83, xend = b+9, yend = 2.83))+
  geom_curve(aes(x = a+9, y = 2.83, xend = c+9, yend = 2.93), curvature = 0.15)+
  geom_curve(aes(x = c+9, y = 2.93, xend = d+9, yend = 2.93), curvature = -0.4)+
  geom_curve(aes(x = d+9, y = 2.93, xend = b+9, yend = 2.83), curvature = 0.15)+
  
  
  
  geom_hline(aes( yintercept = 4.2),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e, y = 4.2, xend = f, yend = 4.2))+
  geom_curve(aes(x = e, y = 4.2, xend = g, yend = 4.3), curvature = 0.15)+
  geom_curve(aes(x = g, y = 4.3, xend = h, yend = 4.3), curvature = -0.4)+
  geom_curve(aes(x = h, y = 4.3, xend = f, yend = 4.2), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 3.5),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e+4.5, y = 3.5, xend = f+4.5, yend = 3.5))+
  geom_curve(aes(x = e+4.5, y = 3.5, xend = g+4.5, yend = 3.6), curvature = 0.15)+
  geom_curve(aes(x = g+4.5, y = 3.6, xend = h+4.5, yend = 3.6), curvature = -0.4)+
  geom_curve(aes(x = h+4.5, y = 3.6, xend = f+4.5, yend = 3.5), curvature = 0.15)+
  
  geom_hline(aes( yintercept = 2.8),color= "gray", size = 0.1, alpha=0.4)+
  geom_segment(aes(x = e+9, y = 2.8, xend = f+9, yend = 2.8))+
  geom_curve(aes(x = e+9, y = 2.8, xend = g+9, yend = 2.9), curvature = 0.15)+
  geom_curve(aes(x = g+9, y = 2.9, xend = h+9, yend = 2.9), curvature = -0.4)+
  geom_curve(aes(x = h+9, y = 2.9, xend = f+9, yend = 2.8), curvature = 0.15)+
  
  
  
  geom_segment(mapping=aes(x=-20, y=4.15, xend=40, yend=4.15), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#ebcf4f") +
  geom_segment(mapping=aes(x=-14, y=4.05, xend=40, yend=4.05), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#34cb30") +
  geom_segment(mapping=aes(x=-14, y=4.1, xend=46, yend=4.1), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#53dfde") +
  
  geom_segment(mapping=aes(x=-20, y=3.45, xend=40, yend=3.45), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#ebcf4f") +
  geom_segment(mapping=aes(x=-14, y=3.35, xend=40, yend=3.35), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#34cb30") +
  geom_segment(mapping=aes(x=-14, y=3.40, xend=46, yend=3.40), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#53dfde") +
  
  geom_segment(mapping=aes(x=-20, y=2.75, xend=40, yend=2.75), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#ebcf4f") +
  geom_segment(mapping=aes(x=-14, y=2.65, xend=40, yend=2.65), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#34cb30") +
  geom_segment(mapping=aes(x=-14, y=2.70, xend=46, yend=2.70), arrow=arrow(ends='both', length = unit(0.015, "npc")), size=0.75, color="#53dfde") +
  
  
  
  geom_vline(aes( xintercept = 40),color= "blue", linetype="dashed", size = 1)+
  geom_vline(aes( xintercept = 46),color= "red", linetype="dashed", size=1 )+ 
  #geom_vline(aes( xintercept = 34),color= "red", linetype="dashed", size=0.5 )+
  annotate("text", x = 41.6, y = 4.52, label = "RNTLw", angle=-90, size=4.8)+
  annotate("text", x = 47.6, y = 4.52, label = "PTLw", angle=-90, size=4.8)+
  #annotate("text", x = 36.2, y = 1.8, label = "not expected PL  upper  bound", angle=-90, size=4.8)+
  
  geom_vline(aes( xintercept = -20),color= "blue", linetype="dashed", size = 1)+
  geom_vline(aes( xintercept = -14),color= "red", linetype="dashed", size=1 )+ 
  #geom_vline(aes( xintercept = -14),color= "red", linetype="dashed", size=0.5 )+
  annotate("text", x = -18.4, y = 4.52, label = "RNTLc", angle=-90, size=4.8)+
  annotate("text", x = -12.4, y = 4.52, label = "PTLc", angle=-90, size=4.8)+
  #annotate("text", x = -11.8, y = 3.5, label = "not expected PL  lower  bound", angle=-90, size=4.8)+
  
  ylab(element_blank())+
  xlab("Temperature")+
  scale_y_continuous(limits = c(2.65,4.6))+
  theme_minimal()+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none",axis.title.x = element_text(size=15), axis.text.x = element_blank(), axis.text.y=element_blank(), axis.line.x = element_line(color= "black", linetype = "solid")); p1


